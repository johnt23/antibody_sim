if(i%%50==0){
print(paste0("Iteration: ",i,"; Time elapsed: ",proc.time()[3] - ptm[3]))
}
sim.results <- data.frame(seed=rseed,
year=1:length(true_SSB),
true_ssb=true_SSB,
est_ssb=est_SSB,
true_rec=true_REC,
est_rec=est_REC,
true_infection=true_INF,
est_infection=est_INF,
convergence=converg,
message=converg_message)
sim.results
}
stopCluster(cl)
simtime_2 <- proc.time() - ptm
# Save em_runs to .csv in OM#_runs folder
write.csv(em_runs,paste0(mainpath,"Scenario_",scenario,"_runs.csv"),row.names=FALSE)
timing <- data.frame(em_run_time_mins=simtime_2[3]/60)
write.csv(timing,paste0(mainpath,"Scenario_",scenario,"_time.csv"),row.names=FALSE)
# Time-varying background mortality:  100.6 minutes
# Time-varying background mortality without estimating disease:  9.7 minutes
# Time-varying disease mortality:  35.3 minutes
# Age-specific mixing ignored:  15.42 minutes
# Carryover infections:  174.8 minutes
# Incorporating only the disease prevalence index:  8.51 minutes
return(em_runs)
}
##################################
# Run Operating Model and Store output in separate folders
##################################
library(doParallel)
library(dplyr)
library(tidyr)
library(prodlim)
library(R2admb)
# Operating model initialization (things that don't change amongst all scenarios)
nyr=100
nage=8
nstage=3
ndays=120
avg_waa=c(70, 94, 115, 134, 150, 160, 165, 168)
N_sims <- 500
# Exponent on Carrier or Infected numbers within Force of Infection equation - sometimes set to slightly less than 1 because of instability in dynamics (which I haven't seen)
nonlinear_exp_1 <- 1
nonlinear_exp_2 <- 1
mainpath <- here::here("results/simulations/base_age specific mixing/")
# operating_model <- paste0(mainpath,"om1_small samp_runs/")
# operating_model <- paste0(mainpath,"om1_young sus vulnerable_runs/")
# operating_model <- paste0(mainpath,"time_varying_background_mortality/")
# operating_model <- paste0(mainpath,"time_varying_disease_mortality/")
# operating_model <- paste0(mainpath,"ignore_carryover_infections/")
# operating_model <- paste0(mainpath,"all_time_varying_mortality/")
# operating_model <- paste0(mainpath,"base_with_catches/")
##################################
# Scenario: Base (disease is ignored)
##################################
rseed_global <- 91827374
set.seed(rseed_global)
rseeds <- sort(runif(N_sims,100,10^7))
operating_model <- paste0(mainpath,"ignore_disease/")
fishing_mort=rep(0,times=nyr)
sig_nat_mor = 0
log_sigma_R = 0.1823216
vhs_trans_rate_I=0.01
vhs_trans_rate_C=0.000001
vhs_mort_rate=rep(11/365,times=nyr) # 11/365
vhs_rec_rate=rep(26/365,times=nyr) # 26/365
# vhs_mort_rate = runif(nyr,9/365,21/365)
# vhs_rec_rate = runif(nyr,20/365,70/365) # 26/365
dep_scaling=0 # scaling exponent for frequency (dep_scaling=0) to density dependent (dep_scaling=1) transmission
ignore.carryover.inf <- TRUE # All Infected fish die between the end of this year's transmission and next year's
inf_prev_survey <- round(runif(nyr,1,90))  # Disease prevalence sampling dates (Generate random sequential dates within the first month of transmission)
inf_prev_survey <- cbind(inf_prev_survey,inf_prev_survey + round(runif(nyr,1,15)))
inf_prev_survey <- cbind(inf_prev_survey,inf_prev_survey[,2] + round(runif(nyr,1,15)))
survey_selA50 <- 3
survey_selA95 <- 4
maturity_A50 <- 3
maturity_A95 <- 4
disease_vulA50 <- 3
disease_vulA95 <- 4
dis_survey_selA50 <- 3
dis_survey_selA95 <- 4
selA50 = 3
selA95 = 4
# Obsevation model initialization
sage = 0
comp_samp_size = 200
catch_comp_samp_size = 200
antibody_comp_samp_size = 200
survey_cv = 0.3
obs_years = 51:nyr
nyr_obs = length(obs_years)
vhs_mort_rate = runif(nyr,30/365,60/365)
vhs_rec_rate = runif(nyr,5/365,20/365)
vhs_mort_rate/(vhs_mort_rate+vhs_rec_rate)
vhs_mort_rate = runif(nyr,30/365,60/365)
vhs_rec_rate = runif(nyr,5/365,15/365)
vhs_mort_rate/(vhs_mort_rate+vhs_rec_rate)
hist(vhs_mort_rate/(vhs_mort_rate+vhs_rec_rate))
vhs_mort_rate = runif(nyr,30/365,60/365)
vhs_rec_rate = runif(nyr,5/365,30/365)
hist(vhs_mort_rate/(vhs_mort_rate+vhs_rec_rate))
vhs_mort_rate = runif(nyr,30/365,60/365)
vhs_rec_rate = runif(nyr,5/365,30/365)
hist(vhs_mort_rate/(vhs_mort_rate+vhs_rec_rate))
operating_model <- paste0(mainpath,"time_varying_disease_mortality_recovery_greater survival changes/")
sig_nat_mor <- 0
disease_vulA50 <- 3
comp_samp_size = 200
catch_comp_samp_size = 200
antibody_comp_samp_size = 200
vhs_mort_rate = runif(nyr,30/365,60/365)
vhs_rec_rate = runif(nyr,5/365,30/365)
ptm <- proc.time()
run_om(nyr,nage,nstage,ndays,avg_waa,fishing_mort,sig_nat_mor,log_sigma_R,vhs_trans_rate_I,vhs_trans_rate_C,vhs_mort_rate,vhs_rec_rate,dep_scaling,
nonlinear_exp_1,nonlinear_exp_2,ignore.carryover.inf,inf_prev_survey,survey_selA50,survey_selA95,maturity_A50,maturity_A95,disease_vulA50,
disease_vulA95,dis_survey_selA50,dis_survey_selA95,selA50,selA95,sage,comp_samp_size,catch_comp_samp_size,antibody_comp_samp_size,survey_cv,obs_years,nyr_obs,rseeds,N_sims,operating_model)
simtime_1 <- proc.time() - ptm
simtime_1[3]/60
# 03/29/2021: 7.6 mins
scenario <- "time_varying_disease_mortality_recovery_greater survival changes"
EM_dir <- here::here("results/em_v1/")
model_version <- "vhs_asa_em_v1"
dis_mix_age_thresh <- 5
fix_rec_rate <- 1
fix_dis_survey_slx <- 1
Params = list(dummy=                    0,                    #1
ac_coef_rec=              0.6,                  #2
natural_mortality=        0.25,                 #3
log_Ninit=                4,                    #4
log_rbar=                 4,                    #5 (5.2)
log_q_survey=             -0.5,                 #6
plus_group_mortality=     0.25,                 #7
log_SD_survey=            -1.203973,            #8
log_sigma_R=              0.1,                  #9 (0.1823216)
log_sigma_Ninit=          0.1,                  #10
selA50=                   2.5,                  #11
selA95=                   3,                    #12
survey_selA50=            2,                    #13 (3)
survey_selA95=            3,                    #14 (4)
disease_selA50=           2,                    #15 (3)
disease_selA95=           3,                    #16 (4)
dis_survey_selA50=        3,                    #17
dis_survey_selA95=        4,                    #18
fix_recov_par=          0.5,                    #19 (0.7027)
log_Ninit_devs=         rep(0.0,times=nage-1),  #20
log_rbar_devs=          rep(0.0,times=nyr_obs ),#21
init_immune=            rep(0,times=nage),      #22
tran_infec_rate=        rep(0.5,times=nyr_obs), #23 - NOTE: DO NOT SET THIS TO ZERO!!!!
beta_prev_index=        0)                      #24
fixed_par_ls <-  c(1,2,3,6,7,8,10,11,12,17,18,22,24)
ptm <- proc.time()
em.results <- run_em(EM_dir,model_version,operating_model,scenario,nage,nyr_obs,fixed_par_ls,dis_mix_age_thresh,fix_rec_rate,fix_dis_survey_slx,N_sims,rseeds,Params)
simtime_2 <- proc.time() - ptm
simtime_2[3]/60
# 03/29/2021: 30.10 mins
# plot_results.R
#  Created by John Trochta
#  This code loads in results from simulation runs and plots summary figures
library(dplyr)
options(scipen=9)
setwd(here::here())
# dir.ls <- c("simulations/Scenario_ignore_disease_multinom_runs.csv",
#             "simulations/Scenario_ignore_disease_runs.csv")
# scenario.names <- c("Multinomial\nlikelihood",
#                     "Binomial\nlikelihood")
# dir.ls <- c("simulations/Scenario_incorporate_seroprevalence_runs.csv",
#             "simulations/om_base_jan2021/Scenario_base_runs.csv"
#             )
# scenario.names <- c("Incorporate serorpevalence (Mar 2021)",
#                     "Incorporate serorpevalence (Jan 2021)")
# dir.ls <- c("simulations/Scenario_ignore_disease_runs.csv",
#             "simulations/Scenario_ignore_disease_greater survival changes_runs.csv")
# scenario.names <- c("Ignore disease (ver 1)",
#                     "Ignore disease (ver 2)")
dir.ls <- c("simulations/Scenario_ignore_disease_runs.csv",
"simulations/Scenario_incorporate_infection_prevalence_runs.csv",
"simulations/Scenario_incorporate_seroprevalence_runs.csv",
"simulations/Scenario_small_sample_size_runs.csv",
"simulations/Scenario_delayed_mixing_of_susceptible_runs.csv",
"simulations/Scenario_age_specific_mixing_ignored_runs.csv",
"simulations/Scenario_time_varying_background_mortality_runs.csv",
"simulations/Scenario_time_varying_background_mortality_ignore_disease_runs.csv",
"simulations/Scenario_timevarying_disease_mortality_recovery_runs.csv")
scenario.names <- c("Ignore disease",
"Incorporate\ninfection\nprevalence",
"Incorporate\nseroprevalence",
"Small\nsample size",
"Delayed mixing\nof susceptibles",
"Age-specific\nmixing\nignored",
"Time-varying\nbackground\nmortality",
"Time-varying\nbackground\nmortality and\ndisease ignored",
"Time-varying\ndisease\nmortality/recovery")
dir.ls <- c("simulations/base_age specific mixing/Scenario_time_varying_disease_mortality_recovery_greater survival changes_runs.csv")
scenario.names <- c("Time-varying disease mortality ver2")
# Save em_runs to .csv in OM#_runs folder
sim.outputs <- data.frame(scenario=scenario.names[1],
read.csv(paste0(here::here("results/"),dir.ls[1]),stringsAsFactors=FALSE))
for(i in 2:length(dir.ls)){
temp <- data.frame(scenario=scenario.names[i],
read.csv(paste0(here::here("results/"),dir.ls[i]),stringsAsFactors=FALSE))
# sim.outputs <- rbind(sim.outputs,select(temp,-year))
sim.outputs <- rbind(sim.outputs,temp)
rm(temp)
}
# Check (and remove) non-converged models
nonconverged <- sim.outputs[sim.outputs$convergence!=0,]
sim.outputs <- sim.outputs[sim.outputs$convergence==0,]
convergence.check <- sim.outputs %>% group_by(scenario,seed) %>% summarize(con.rate = all(convergence==0))
convergence.rate <- convergence.check %>% group_by(scenario) %>% summarize(rate=sum(con.rate,na.rm = TRUE)/500)
##################################
# Plotting Relative Error of Key outputs (SSB, REC, Infection rates)
##################################
library(reshape2)
library(ggplot2)
library(grid)
library(gtable)
library(foreach)
# Remove NAs, but come back and check why there are NAs in the first place....
sim.outputs <- sim.outputs[!is.na(sim.outputs$scenario),]
# Factor scenario to arrange names of scenario
sim.outputs$scenario_fac <- factor(sim.outputs$scenario,levels=scenario.names)
# Scenarios where no disease is estimated (and should be ignored in calculating errors for disease-related quanities)
scen.no.dis <- c("Ignore disease","Incorporate\ninfection\nprevalence","Time-varying\nbackground\nmortality and\ndisease ignored")
# Calculate relative error for SSB and Recruitment
rel.err <- sim.outputs %>% group_by(scenario_fac,seed) %>% transmute('Year'=1:length(true_ssb),
'SSB'=(est_ssb - true_ssb)/true_ssb,
'Recruitment'=(est_rec - true_rec)/true_rec,
'Infection rate'=ifelse(scenario_fac %in% scen.no.dis,NA,(est_infection-true_infection)))
# Melt the data frame
rel.err.2 <- melt(as.data.frame(rel.err),id=1:3)
# Calc 95% quantiles for each year
rel.err.3 <- rel.err.2 %>% group_by(scenario_fac,variable,Year) %>% summarize(Q.025=quantile(value,probs=0.025,na.rm=TRUE),
Q.25=quantile(value,probs=0.25,na.rm=TRUE),
Q.50=quantile(value,probs=0.5,na.rm=TRUE),
Q.75=quantile(value,probs=0.75,na.rm=TRUE),
Q.975=quantile(value,probs=0.975,na.rm=TRUE)) %>%
filter(!is.na(Q.50))
rel.err.3$scenario <- sapply(rel.err.3$scenario_fac,FUN=function(x) paste(strwrap(x,width=25),collapse="\n"))
# Now plot
font.size <- 12
dat.2.plot <- filter(rel.err.3,scenario_fac %in% scenario.names[1:5])
re.plot <- ggplot(data=dat.2.plot,aes(x=Year,y=Q.50)) +
geom_ribbon(aes(ymin=Q.025,ymax=Q.975),fill="grey70")+
geom_ribbon(aes(ymin=Q.25,ymax=Q.75),fill="grey85")+
geom_hline(yintercept=0,linetype="dashed")+
geom_line(size=1)+
coord_cartesian(ylim=c(-1,1))+
facet_grid(variable~scenario_fac,switch="y", drop=T)+
scale_x_continuous(limits=c(0,50),breaks=c(0,50),expand=c(0.05,0.05))+
theme_classic()+
theme(strip.background = element_blank(),
panel.border=element_rect(fill=NA),
plot.title = element_text(hjust = 0.5),
strip.text.y = element_text(size=font.size,vjust = 0),
strip.text.x = element_text(size=font.size),
strip.placement = "outside",
axis.text.y = element_text(size=font.size-2),
axis.text.x = element_text(size=font.size-2),
axis.ticks.x= element_line(color="black"),
# axis.title.y = element_text(size=font.size+2),
axis.title.y = element_blank(),
axis.title.x = element_text(size=font.size),
plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm"),
panel.spacing = unit(0.25, "lines"),
legend.position ="none")
re.plot
1177.11/7
vhs_mort_rate = runif(nyr,30/365,60/365)
vhs_rec_rate = runif(nyr,5/365,30/365)
# Operating model initialization (things that don't change amongst all scenarios)
nyr=100
nage=8
nstage=3
ndays=120
avg_waa=c(70, 94, 115, 134, 150, 160, 165, 168)
N_sims <- 500
rseed_global <- 91827374
set.seed(rseed_global)
rseeds <- sort(runif(N_sims,100,10^7))
operating_model <- paste0(mainpath,"ignore_disease/")
fishing_mort=rep(0,times=nyr)
sig_nat_mor = 0
log_sigma_R = 0.1823216
vhs_trans_rate_I=0.01
vhs_trans_rate_C=0.000001
vhs_mort_rate=rep(11/365,times=nyr) # 11/365
vhs_rec_rate=rep(26/365,times=nyr) # 26/365
# vhs_mort_rate = runif(nyr,9/365,21/365)
# vhs_rec_rate = runif(nyr,20/365,70/365) # 26/365
dep_scaling=0 # scaling exponent for frequency (dep_scaling=0) to density dependent (dep_scaling=1) transmission
min(vhs_rec_rate/(vhs_mort_rate+vhs_rec_rate))
vhs_mort_rate = runif(nyr,9/365,21/365)
vhs_rec_rate = runif(nyr,20/365,70/365)
min(vhs_rec_rate/(vhs_mort_rate+vhs_rec_rate))
max(vhs_rec_rate/(vhs_mort_rate+vhs_rec_rate))
vhs_mort_rate = runif(nyr,30/365,60/365)
vhs_rec_rate = runif(nyr,5/365,30/365)
max(vhs_rec_rate/(vhs_mort_rate+vhs_rec_rate))
min(vhs_rec_rate/(vhs_mort_rate+vhs_rec_rate))
rel.err <- sim.outputs %>% group_by(scenario,seed) %>%
transmute(Year=1:length(true_ssb),
ssb=(est_ssb - true_ssb)/true_ssb,
rec=(est_rec - true_rec)/true_rec,
inf=ifelse(scenario_fac %in% scen.no.dis,NA,(est_infection-true_infection)))
mare <- rel.err %>% group_by(scenario,Year) %>%
summarise(mare.ssb = median(abs(ssb)),
mare.rec = median(abs(rec)),
mare.inf = median(abs(inf)))
mare.sum.derived <- mare %>% group_by(scenario) %>%
summarise(finalyr.ssb = mare.ssb[Year==max(Year)],
median.ssb = median(mare.ssb),
median.rec = median(mare.rec),
median.inf = median(mare.inf[Year %in% 2:(max(Year)-1)]))
threshold <- 0.4
# Calculate relative error for SSB and Recruitment
P.risk <- sim.outputs %>% group_by(scenario,seed) %>%
transmute('Year'=1:length(true_ssb),
'Binary.above'=est_ssb > (true_ssb + threshold*true_ssb),
'Binary.below'=est_ssb < (true_ssb - threshold*true_ssb))
P.risk <- P.risk %>% group_by(scenario,Year) %>%
summarise(P.above=sum(Binary.above)/length(Binary.above),
#length.Pabove = length(Binary.above),
P.below=sum(Binary.below)/length(Binary.below))
P.summary <- P.risk %>% group_by(scenario) %>%
summarise(median.P.above=median(P.above),
finalyr.P.above=P.above[Year==max(Year)],
median.P.below=median(P.below),
finalyr.P.below=P.below[Year==max(Year)])
View(P.summary)
View(mare.sum.derived)
5/35
exp(-11/365)
1-exp(-11/365)
1-exp(-30/365)
1-exp(-5/365)
0.0136/(0.0789+0.0136)
0.01360523/(0.07890471+0.01360523)
26/37
A <- 1-exp(-11/365)
A <- 1-exp(-26/365)
B <- 1-exp(-26/365)
A <- 1-exp(-11/365)
B/(B+A)
# plot_results.R
#  Created by John Trochta
#  This code loads in results from simulation runs and plots summary figures
library(dplyr)
options(scipen=9)
setwd(here::here())
# dir.ls <- c("simulations/Scenario_ignore_disease_multinom_runs.csv",
#             "simulations/Scenario_ignore_disease_runs.csv")
# scenario.names <- c("Multinomial\nlikelihood",
#                     "Binomial\nlikelihood")
# dir.ls <- c("simulations/Scenario_incorporate_seroprevalence_runs.csv",
#             "simulations/om_base_jan2021/Scenario_base_runs.csv"
#             )
# scenario.names <- c("Incorporate serorpevalence (Mar 2021)",
#                     "Incorporate serorpevalence (Jan 2021)")
# dir.ls <- c("simulations/Scenario_ignore_disease_runs.csv",
#             "simulations/Scenario_ignore_disease_greater survival changes_runs.csv")
# scenario.names <- c("Ignore disease (ver 1)",
#                     "Ignore disease (ver 2)")
base.om <- "simulations/base OM_age specific mixing/"
dir.ls <- c("Scenario_ignore_disease_runs.csv",
"Scenario_incorporate_infection_prevalence_runs.csv",
"Scenario_incorporate_seroprevalence_runs.csv",
"Scenario_small_sample_size_runs.csv",
"Scenario_early_mixing_of_susceptible_runs.csv",
"Scenario_age_specific_mixing_ignored_runs.csv",
"Scenario_time_varying_background_mortality_runs.csv",
"Scenario_time_varying_background_mortality_ignore_disease_runs.csv",
"Scenario_timevarying_disease_mortality_recovery_runs.csv")
dir.ls <- paste0(base.om,dir.ls)
scenario.names <- c("Ignore disease",
"Incorporate\ninfection\nprevalence",
"Incorporate\nseroprevalence",
"Small\nsample size",
"Early mixing\nof susceptibles",
"Age-specific\nmixing\nignored",
"Time-varying\nbackground\nmortality",
"Time-varying\nbackground\nmortality and\ndisease ignored",
"Time-varying\ndisease\nmortality/recovery")
# dir.ls <- c("simulations/base_age specific mixing/Scenario_time_varying_disease_mortality_recovery_greater survival changes_runs.csv")
# scenario.names <- c("Time-varying disease mortality ver2")
# Save em_runs to .csv in OM#_runs folder
sim.outputs <- data.frame(scenario=scenario.names[1],
read.csv(paste0(here::here("results/"),dir.ls[1]),stringsAsFactors=FALSE))
for(i in 2:length(dir.ls)){
temp <- data.frame(scenario=scenario.names[i],
read.csv(paste0(here::here("results/"),dir.ls[i]),stringsAsFactors=FALSE))
# sim.outputs <- rbind(sim.outputs,select(temp,-year))
sim.outputs <- rbind(sim.outputs,temp)
rm(temp)
}
# Check (and remove) non-converged models
nonconverged <- sim.outputs[sim.outputs$convergence!=0,]
sim.outputs <- sim.outputs[sim.outputs$convergence==0,]
convergence.check <- sim.outputs %>% group_by(scenario,seed) %>% summarize(con.rate = all(convergence==0))
convergence.rate <- convergence.check %>% group_by(scenario) %>% summarize(rate=sum(con.rate,na.rm = TRUE)/500)
##################################
# Plotting Relative Error of Key outputs (SSB, REC, Infection rates)
##################################
library(reshape2)
library(ggplot2)
library(grid)
library(gtable)
library(foreach)
# Remove NAs, but come back and check why there are NAs in the first place....
sim.outputs <- sim.outputs[!is.na(sim.outputs$scenario),]
# Factor scenario to arrange names of scenario
sim.outputs$scenario_fac <- factor(sim.outputs$scenario,levels=scenario.names)
# Scenarios where no disease is estimated (and should be ignored in calculating errors for disease-related quanities)
scen.no.dis <- c("Ignore disease","Incorporate\ninfection\nprevalence","Time-varying\nbackground\nmortality and\ndisease ignored")
# Calculate relative error for SSB and Recruitment
rel.err <- sim.outputs %>% group_by(scenario_fac,seed) %>% transmute('Year'=1:length(true_ssb),
'SB'=(est_ssb - true_ssb)/true_ssb,
'Recruitment'=(est_rec - true_rec)/true_rec,
'Infection rate'=ifelse(scenario_fac %in% scen.no.dis,NA,(est_infection-true_infection)))
# Melt the data frame
rel.err.2 <- melt(as.data.frame(rel.err),id=1:3)
# Calc 95% quantiles for each year
rel.err.3 <- rel.err.2 %>% group_by(scenario_fac,variable,Year) %>% summarize(Q.025=quantile(value,probs=0.025,na.rm=TRUE),
Q.25=quantile(value,probs=0.25,na.rm=TRUE),
Q.50=quantile(value,probs=0.5,na.rm=TRUE),
Q.75=quantile(value,probs=0.75,na.rm=TRUE),
Q.975=quantile(value,probs=0.975,na.rm=TRUE)) %>%
filter(!is.na(Q.50))
rel.err.3$scenario <- sapply(rel.err.3$scenario_fac,FUN=function(x) paste(strwrap(x,width=25),collapse="\n"))
# Now plot
font.size <- 12
dat.2.plot <- filter(rel.err.3,scenario_fac %in% scenario.names[1:5])
View(rel.err.3)
View(rel.err.2)
threshold <- 0.4
# Calculate relative error for SSB and Recruitment
P.risk <- sim.outputs %>% group_by(scenario,seed) %>%
transmute('Year'=1:length(true_ssb),
'Binary.above'=est_ssb > (true_ssb + threshold*true_ssb),
'Binary.below'=est_ssb < (true_ssb - threshold*true_ssb))
P.risk <- P.risk %>% group_by(scenario,Year) %>%
summarise(P.above=sum(Binary.above)/length(Binary.above),
#length.Pabove = length(Binary.above),
P.below=sum(Binary.below)/length(Binary.below))
P.summary.0.4 <- P.risk %>% group_by(scenario) %>%
summarise(median.P.above.0.4=median(P.above),
finalyr.P.above.0.4=P.above[Year==max(Year)],
median.P.below.0.4=median(P.below),
finalyr.P.below.0.4=P.below[Year==max(Year)])
threshold <- 0.1
P.risk <- sim.outputs %>% group_by(scenario,seed) %>%
transmute('Year'=1:length(true_ssb),
'Binary.above'=est_ssb > (true_ssb + threshold*true_ssb),
'Binary.below'=est_ssb < (true_ssb - threshold*true_ssb))
P.risk <- P.risk %>% group_by(scenario,Year) %>%
summarise(P.above=sum(Binary.above)/length(Binary.above),
P.below=sum(Binary.below)/length(Binary.below))
P.summary.0.1 <- P.risk %>% group_by(scenario) %>%
summarise(median.P.above.0.1=median(P.above),
finalyr.P.above.0.1=P.above[Year==max(Year)],
median.P.below.0.1=median(P.below),
finalyr.P.below.0.1=P.below[Year==max(Year)])
threshold <- 0
P.risk <- sim.outputs %>% group_by(scenario,seed) %>%
transmute('Year'=1:length(true_ssb),
'Binary.above'=est_ssb > (true_ssb + threshold*true_ssb),
'Binary.below'=est_ssb < (true_ssb - threshold*true_ssb))
P.risk <- P.risk %>% group_by(scenario,Year) %>%
summarise(P.above=sum(Binary.above)/length(Binary.above),
P.below=sum(Binary.below)/length(Binary.below))
P.summary.0.0 <- P.risk %>% group_by(scenario) %>%
summarise(median.P.above.0.0=median(P.above),
finalyr.P.above.0.0=P.above[Year==max(Year)],
median.P.below.0.0=median(P.below),
finalyr.P.below.0.0=P.below[Year==max(Year)])
View(P.summary.0.4)
View(P.summary.0.0)
View(P.risk)
View(sim.outputs)
View(sim.outputs)
threshold <- 0
P.risk <- sim.outputs %>% group_by(scenario,seed) %>%
transmute('Year'=1:length(true_ssb),
'SB.above'=est_ssb > (true_ssb + threshold*true_ssb),
'SB.below'=est_ssb < (true_ssb - threshold*true_ssb),
'R.above'=est_rec > (true_rec + threshold*true_rec),
'R.below'=est_rec < (true_rec - threshold*true_rec))
P.risk <- P.risk %>% group_by(scenario,Year) %>%
summarise(P.SB.above=sum(SB.above)/length(SB.above),
P.SB.below=sum(SB.below)/length(SB.below),
P.R.above=sum(R.above)/length(R.above),
P.R.below=sum(R.below)/length(R.below))
View(P.risk)
P.summary.0.0 <- P.risk %>% group_by(scenario) %>%
summarise(median.SB.above.0.0=median(P.SB.above),
finalyr.SB.above.0.0=P.SB.above[Year==max(Year)],
median.SB.below.0.0=median(P.SB.below),
finalyr.SB.below.0.0=P.SB.below[Year==max(Year)],
median.R.above.0.0=median(P.R.above),
finalyr.R.above.0.0=P.R.above[Year==max(Year)],
median.R.below.0.0=median(P.R.below),
finalyr.R.below.0.0=P.R.below[Year==max(Year)])
View(P.summary.0.0)
View(P.summary.0.0)
View(P.risk)
View(P.risk)
write.csv(P.risk,file=here::here(paste0("results/figures/Annual_Bias in SB and R by scenario.csv")),
row.names=FALSE)
write.csv(P.summary.0.0,file=here::here(paste0("results/figures/Summary_Bias in SB and R by scenario.csv")),
row.names=FALSE)
