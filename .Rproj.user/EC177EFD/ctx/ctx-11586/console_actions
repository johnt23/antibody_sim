{
    "data" : [
        "+ ",
        "     # predicted_immune_comps[i,]=ab_logit_max/(1+exp(-ab_logit_k*(true_prop_immune[i]-ab_logit_midpoint)))*predicted_immune_comps[i,]",
        "+ ",
        "     ",
        "+ ",
        "     spawners[i,]=mature*(Nya[i,])",
        "+ ",
        "     SSB_atage[i,]=spawners[i,]*avg_waa",
        "+ ",
        "     ",
        "+ ",
        "     # Now this could be use for stock-recruit function",
        "+ ",
        "     SSB[i]=sum(SSB_atage[i,])#prop_female*sum(SSB_atage[i,])",
        "+ ",
        "     ",
        "+ ",
        "     # Apply fishing - calculate catch-at-age calculation",
        "+ ",
        "     Cya[i,] <- Nya[i,] * fish_slx * (1-fish_rate[i])",
        "+ ",
        "     N_catch[i] <- sum(Cya[i,])",
        "+ ",
        "     catches[i] <- sum(Cya[i,]*avg_waa)",
        "+ ",
        "     catch_comps[i,] <- (Cya[i,]*avg_waa)/catches[i]",
        "+ ",
        "     ",
        "+ ",
        "     # Initialize numbers in each stage at the start of the next year/season",
        "+ ",
        "     N_das[1,] <- N_yas[i,]*rep((1-fish_slx * (1-fish_rate[i])),each=nstage)*dis_vul_vector",
        "+ ",
        "     beta_I <- matrix(0,ndays,nage)",
        "+ ",
        "     beta_C <- matrix(0,ndays,nage)",
        "+ ",
        "     ",
        "+ ",
        "    for(d in 1:(ndays-1)){",
        "+ ",
        "      for(j in 1:nage){",
        "+ ",
        "        age_vector <- ((j-1)*nstage+1):((j-1)*nstage+nstage)",
        "+ ",
        "        ",
        "+ ",
        "        # Frequency dependent",
        "+ ",
        "        beta_I[d,j] <- 1-exp(-sum(mu_I[j,]*(N_das[d,sus_indices])*N_das[d,infected_indices]^nonlinear_exp_1)*sum(N_das[d,])^dep_scaling/sum(N_das[d,]))",
        "+ ",
        "        beta_C[d,j] <- 1-exp(-sum(mu_C[j,]*(N_das[d,sus_indices])*N_das[d,rec_indices]^nonlinear_exp_2)*sum(N_das[d,])^dep_scaling/sum(N_das[d,]))",
        "+ ",
        "        # SIR is set-up so that transition probability of each column into row i",
        "+ ",
        "        sir <- t(matrix(c(1-beta_I[d,j]-beta_C[d,j],   0,                    0,",
        "+ ",
        "                          beta_I[d,j]+beta_C[d,j],      (1-alpha[j]-rho[j]),  0,",
        "+ ",
        "                          0,                           rho[j],               1),nrow=nstage,byrow = TRUE))",
        "+ ",
        "        ",
        "+ ",
        "        # SIR is set-up so that transition probability of each column into row i",
        "+ ",
        "        N_das_temp <- ((N_das[d,age_vector]) %*% sir)",
        "+ ",
        "        ",
        "+ ",
        "        # On last day, assume remaining infected either die or recover to the exact proportion from the combined rate",
        "+ ",
        "        # This insures no infecteds remain, as typically observed in the field",
        "+ ",
        "        if(d==(ndays-1)){",
        "+ ",
        "            final_recov <- ifelse(rho[j]==0,0,rho[j]/(alpha[j]+rho[j]))",
        "+ ",
        "            N_das_temp <- N_das_temp + c(0,-N_das_temp[2],final_recov*N_das_temp[2])",
        "+ ",
        "        }",
        "+ ",
        "        ",
        "+ ",
        "        # CHECK THIS HARD!!!!!",
        "+ ",
        "        # Getting some weird thing where N_das will go negative (numbers in certain ages and stages below 0, ONLY when incorporating some beta_C value>0)",
        "+ ",
        "        # N_das_temp[N_das_temp<0] <- 0",
        "+ ",
        "        ",
        "+ ",
        "        # Now calculate natural survival",
        "+ ",
        "        if(j<nage){",
        "+ ",
        "          surv_temp <- surv_daily",
        "+ ",
        "        }else{",
        "+ ",
        "          surv_temp <- surv_daily_plus",
        "+ ",
        "        }",
        "+ ",
        "         ",
        "+ ",
        "        # Number new infections per day - take the 1st index of the N_das[d,age_vector] vector which is the # susceptible in age j",
        "+ ",
        "        # N_daily_infections[d+1,j] <- (beta_I[d,j]+beta_C[d,j])*N_das[d,age_vector][1]",
        "+ ",
        "        N_daily_infections[d+1,j] <- -(N_das_temp[1] - N_das[d,age_vector][1])",
        "+ ",
        "        ",
        "+ ",
        "        # Number daily recoveries",
        "+ ",
        "        # N_daily_recoveries[d+1,j] <- rho[j]*N_das[d,age_vector][2]",
        "+ ",
        "        N_daily_recoveries[d+1,j] <- (N_das_temp[3] - N_das[d,age_vector][3])",
        "+ ",
        "        ",
        "+ ",
        "        # Number deaths due to disease - take the 2nd index of the N_das[d,age_vector] vector which is the # infected in age j",
        "+ ",
        "        # N_daily_disease_deaths[d+1,j] <- alpha[j]*N_das[d,age_vector][2]",
        "+ ",
        "        N_daily_disease_deaths[d+1,j] <- -(N_das_temp[2] - N_das[d,age_vector][2] - N_daily_infections[d+1,j] + N_daily_recoveries[d+1,j])",
        "+ ",
        "        ",
        "+ ",
        "        # Now calculate natural survival",
        "+ ",
        "        N_das[d+1,age_vector] <- N_das_temp * surv_temp",
        "+ ",
        "        ",
        "+ ",
        "        if(d==(ndays-1)){",
        "+ ",
        "          Post_out_Nya[i,j] <- sum((N_das[d+1,]+N_yas[i,]*rep((1-fish_slx * (1-fish_rate[i])),each=nstage)*(1-dis_vul_vector)*season_base_survival)[age_vector])",
        "+ ",
        "          # age-specific (row) stage (column) proportions at the end of the season",
        "+ ",
        "          ",
        "+ ",
        "          # % that are recovered within each age group at the end of the season",
        "+ ",
        "          Pya_immune_postout[i,] <- N_das[d+1,age_vector][3]/sum(N_das[d+1,age_vector])",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    # Daily numbers in each stage by year",
        "+ ",
        "    N_y_susceptible[i,] <- apply(N_das[,sus_indices],1,sum)",
        "+ ",
        "    N_y_infected[i,] <- apply(N_das[,infected_indices],1,sum)",
        "+ ",
        "    N_y_recovered[i,] <- apply(N_das[,rec_indices],1,sum)",
        "+ ",
        "    ",
        "+ ",
        "    # Daily # of disease deaths throughout the season (year x day within season)",
        "+ ",
        "    N_y_dis_deaths[i,] <- apply(N_daily_disease_deaths,1,sum)",
        "+ ",
        "    ",
        "+ ",
        "    # Total numbers of deaths, new infections, and new recoveries (immune) of fish by age in each year i",
        "+ ",
        "    Nya_dis_death[i,] <- apply(N_daily_disease_deaths,2,sum)",
        "+ ",
        "    Nya_new_infect[i,] <- apply(N_daily_infections,2,sum)",
        "+ ",
        "    Nya_new_recoveries[i,] <- apply(N_daily_recoveries,2,sum)",
        "+ ",
        "    ",
        "+ ",
        "    # Incidence proportion",
        "+ ",
        "    incidence_prop[i,] <- apply(N_daily_infections,1,sum)/apply(N_das,1,sum)",
        "+ ",
        "    ",
        "+ ",
        "    # Point prevalence",
        "+ ",
        "    point_prevalence[i,] <- N_y_infected[i,]/apply(N_das,1,sum)",
        "+ ",
        "    ",
        "+ ",
        "    # Now add in those non-vulnerable susceptibles back into the final day of the N_das matrix",
        "+ ",
        "    N_das[ndays,] <- N_das[ndays,] + N_yas[i,]*rep((1-fish_slx * (1-fish_rate[i])),each=nstage)*(1-dis_vul_vector)*season_base_survival",
        "+ ",
        "    ",
        "+ ",
        "    # Cumulative survival over this period",
        "+ ",
        "    season_survival[i,] <- (Post_out_Nya[i,])/Nya[i,]",
        "+ ",
        "    ",
        "+ ",
        "    for(j in 1:(nage-1)){",
        "+ ",
        "      age_vector_1 <- ((j-1)*nstage+1):((j-1)*nstage+nstage)",
        "+ ",
        "      age_vector_2 <- ((j)*nstage+1):((j)*nstage+nstage)",
        "+ ",
        "      N_yas[i+1,age_vector_2] <- N_das[ndays,age_vector_1]*exp(-natural_mortality/(365)*(365-ndays+1))",
        "+ ",
        "      Nya[i+1,j+1] <- sum(N_yas[i+1,age_vector_2])",
        "+ ",
        "      ",
        "+ ",
        "      # Realized total survival rate - I add catches back in an project their survival to not bias this estimate",
        "+ ",
        "      # Sya[i,j] <- (Nya[i,j] - Nya[i+1,j+1] + Cya[i,j])/Nya[i,j]",
        "+ ",
        "      Sya[i,j] <- (Nya[i+1,j+1] + Cya[i,j]*exp(-natural_mortality/(365)*ndays))/Nya[i,j]",
        "+ ",
        "    }",
        "+ ",
        "    # Now calculate realized survival of plus group only",
        "+ ",
        "    # Sya[i,j+1] <- (Nya[i,j+1]- sum(N_das[ndays,age_vector_2]*exp(-natural_mortality/(365)*ndays)) )/Nya[i,j+1]",
        "+ ",
        "    Sya[i,j+1] <- (sum(N_das[ndays,age_vector_2]) + Cya[i,j+1])*exp(-plus_group_mortality/(365)*ndays)/Nya[i,j+1]",
        "+ ",
        "    ",
        "+ ",
        "    # Also account for numbers in plus group (sum numbers from nage-1 moving into nage, and this year's nage)",
        "+ ",
        "    N_yas[i+1,age_vector_2] <- N_yas[i+1,age_vector_2]+N_das[ndays,age_vector_2]*exp(-plus_group_mortality/(365)*ndays)",
        "+ ",
        "    ",
        "+ ",
        "    # Reassign value in final age group",
        "+ ",
        "    Nya[i+1,j+1] <- sum(N_yas[i+1,age_vector_2])",
        "+ ",
        "    ",
        "+ ",
        "    # NEXT YEAR'S RECRUITMENT!",
        "+ ",
        "    #recruits(i) = alpha*SSB(i)*exp(-beta*P_indices(0,2)*SSB(i)) #  Plain Ricker - uses initial year P_index to appropriately scale beta so I don't have to change PIN values or bounds",
        "+ ",
        "    recruits[i] = exp(log_rbar) # Stationary recruitment - independent of biomass",
        "+ ",
        "    ",
        "+ ",
        "    Nya[i+1,1] = recruits[i]*exp(ac_coef_rec*(log(Nya[i,1])-log_rbar+0.5*sigma_R^2) + sqrt(1-ac_coef_rec^2)*log_rbar_devs[i+1]-0.5*sigma_R^2)",
        "+ ",
        "    # Log-normal independent recruitment",
        "+ ",
        "    N_yas[i+1,1] = Nya[i+1,1]",
        "+ ",
        "    N_yas[i+1,2:nstage] <- 0",
        "+ ",
        "    ",
        "+ ",
        "    # Stage proportions in next year",
        "+ ",
        "    Nya_sus[i+1,] <- N_yas[i+1,sus_indices]",
        "+ ",
        "    Nya_sel_sus[i+1,] <- N_yas[i+1,sus_indices]*disease_slx",
        "+ ",
        "    Nya_inf[i+1,] <- N_yas[i+1,infected_indices]",
        "+ ",
        "    Nya_imm[i+1,] <- N_yas[i+1,rec_indices]",
        "+ ",
        "  }",
        "> ",
        "  ",
        "> ",
        "  # Remove extra year",
        "> ",
        "  N_yas <- N_yas[-(nyr+1),]",
        "> ",
        "  Nya <- Nya[-(nyr+1),]",
        "> ",
        "  Nya_imm <- Nya_imm[-(nyr+1),]",
        "> ",
        "  Nya_inf <- Nya_inf[-(nyr+1),]",
        "> ",
        "  Nya_sel_sus <- Nya_sel_sus[-(nyr+1),]",
        "> ",
        "  Nya_sus <- Nya_sus[-(nyr+1),]",
        "> ",
        "  ",
        "> ",
        "  # Epidemic characteristics:",
        "> ",
        "  # Mean duration (based on incidence rate exceeding 0.01)",
        "> ",
        "  duration.incidence <- apply(incidence_prop,1,function(x) sum(x>0.01))",
        "> ",
        "  duration.prevalence <- apply(point_prevalence,1,function(x) sum(x>0.01))",
        "> ",
        "  ",
        "> ",
        "  # Peak prevalence/incidence",
        "> ",
        "  max.incidence <- apply(incidence_prop,1,max)",
        "> ",
        "  max.prevalence <- apply(point_prevalence,1,max)",
        "> ",
        "day.max.prevalence <- apply(point_prevalence,1,function(x) which.max())",
        "Error in which.max() : argument \"x\" is missing, with no default\n",
        "Called from: which.max()\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "day.max.prevalence <- apply(point_prevalence,1,function(x) which.max(x))",
        "> ",
        "day.max.prevalence",
        "  [1]  68 104 119  54  27  33  71  63  52  90 119 119 119 119 119 119 119 119 119 119 119 119 119  44  23  34 116  96 119  98  81  45  54 118  76\n [36] 119  57  83 119 119 118 119  88 111  76  90  69 103  54  64  26  19  29 119 101  81  88 119 119  58  23  21  31  80 119  40  21  27  67  88\n [71] 119  56  36  52  87  14  10  13  30  30  56  23  25 103 119 119 111  19  19  39  61 119 119 119 119 119  45  60  93 119  82  14   9  12  25\n[106]  20  27 119  18  20 119 119 119 119 119  34  25  40  79 119 102 114  78",
        "  27  32 119 119 119 119  60  38  55  26  16  15  15  24  65  78 119\n[141] 119  49  75 119 119  93 119 106  53  42  62 119 119 119  91  24  29 101  61  76 106 119 100  49  60  24  20  29  26  20  28  58  71 108 119\n[176] 119 119 119 119 119  56  43  55  88  37  46 119 119  64  69 119 119 119 119  79  16  14  12  16  95\n",
        "> ",
        "day.max.incidence <- apply(incidence_prop,1,function(x) which.max(x))",
        "> ",
        "apply(incidence_prop,1,function(x) which.max(x))",
        "  [1]  54  94 120  48  22  27  63  56  45  81 120 120 120 120 120 120 120 120 120 120 120 120 120  38  19  29 106  88 120  90  73  38  46 110  68\n [36] 120  50  75 117 120 108 120  79 102  68  82  62  94  47  57  22  16  23 120  92  73  80 120 120  50  19  17  26  72 120  34  18  22  59  79\n [71] 120  49  30  45  79  12   8  10  25  25  49  19  21  94 112 120 102  15  16  32  54 120 120 120 120 120  39  53  81 120  74  12   8  10  21\n[106]  16  23 120  15  16 120 120 120 120 111  29  20  34  66 120  93 105  70",
        "  22  27 120 120 120 120  53  32  48  22  13  12  13  19  49  63 120\n[141] 120  42  67 120 120  85 120  98  46  36  54 120 120 120  83  20  24  93  53  68  95 120  92  43  53  20  16  24  22  16  23  51  63  97 120\n[176] 120 120 120 120 120  49  36  48  80  32  40 120 120  56  61 120 120 120 120  71  13  12  10  13  87\n",
        "> ",
        "day.max.prevalence",
        "  [1]  68 104 119  54  27  33  71  63  52  90 119 119 119 119 119 119 119 119 119 119 119 119 119  44  23  34 116  96 119  98  81  45  54 118  76\n [36] 119  57  83 119 119 118 119  88 111  76  90  69 103  54  64  26  19  29 119 101  81  88 119 119  58  23  21  31  80 119  40  21  27  67  88\n [71] 119  56  36  52  87  14  10  13  30  30  56  23  25 103 119 119 111  19  19  39  61 119 119 119 119 119  45  60  93 119  82  14   9  12  25\n[106]  20  27 119  18  20 119 119 119 119 119  34  25  40  79 119 102 114  78",
        "  27  32 119 119 119 119  60  38  55  26  16  15  15  24  65  78 119\n[141] 119  49  75 119 119  93 119 106  53  42  62 119 119 119  91  24  29 101  61  76 106 119 100  49  60  24  20  29  26  20  28  58  71 108 119\n[176] 119 119 119 119 119  56  43  55  88  37  46 119 119  64  69 119 119 119 119  79  16  14  12  16  95\n",
        "> ",
        "duration.prevalence",
        "  [1]  0  0  0 76 60 61 73 71 67 60  0  0  0  0  0  0  0  0  0  0 28  0  0 70 57 59  0 57 22 58 71 67 70 36 74  0 74 68  0  0  0  0 68 51 76 66 80\n [48] 54 73 76 56 52 54  0 50 68 62  0  0 77 56 54 55 64  0 61 51 53 65 60  0 70 59 64 64 50 47 44 47 48 56 46 48 34 17 14 45 52 51 57 62  0  0  0\n [95]  0  7 72 75  0  0 71 53 49 46 48 45 45  0 46 45  0  0  0  0 43 64 56 59  0  0 54 45 74 57 58  0  0  0  0 79 65 72 55 50 49 46 44  0  0  0  0\n[142] 70 76  0  0 64 24 55 75 67 72  0  0  0 65 58 57 50 71 71  0  0 57",
        " 71 76 56 52 55 52 49 50 58 57  0  0  0  0 34  0  0 77 69 72 66 62 63  0  0\n[189] 77 76  0  0  0  0 73 54 50 47 45 35\n",
        "> ",
        "#  simulation_test.R",
        "> ",
        "#  Created by John Trochta",
        "> ",
        "#  This code runs a single M to generate new data and fits one TMB model (EM).",
        "> ",
        "#  The primary purporse of this program is to test the models and make sure everything is working",
        "> ",
        "#  ",
        "> ",
        "options(scipen=9)",
        "> ",
        "setwd(here::here())",
        "> ",
        "########",
        "> ",
        "# 07/09/2020",
        "> ",
        "# Run tests: Have no disease transmission and see if things work",
        "> ",
        "# - Save in truth initial immune proportions (with arctan transformation)",
        "> ",
        "",
        "> ",
        "########",
        "> ",
        "",
        "> ",
        "# Loading in the data",
        "> ",
        "# Store the file names from which data is available",
        "> ",
        "read.in.data  <- function(){",
        "+ ",
        "  source(file=paste0(here::here(\"src\"),\"/data_reader.R\"))",
        "+ ",
        "  dat.unnamed <- data_reader(filename=\"vhs_asa_em.dat\") # This is nyr - we want to start at nyr_tobefit",
        "+ ",
        "  ",
        "+ ",
        "  flag = dat.unnamed[[1]]",
        "+ ",
        "  dat.unnamed[[1]] = NULL",
        "+ ",
        "  ",
        "+ ",
        "  Data <- list(nyr = dat.unnamed[[1]],",
        "+ ",
        "               sage = dat.unnamed[[2]],",
        "+ ",
        "               nage = dat.unnamed[[3]],",
        "+ ",
        "               comp_samp_size = dat.unnamed[[4]],",
        "+ ",
        "               antibody_comp_samp_size = dat.unnamed[[5]],",
        "+ ",
        "               survey_obs = dat.unnamed[[6]],",
        "+ ",
        "               catches = dat.unnamed[[7]],",
        "+ ",
        "               catch_comps = dat.unnamed[[8]],",
        "+ ",
        "               comp_obs = dat.unnamed[[9]],",
        "+ ",
        "               antibody_obs = dat.unnamed[[10]],",
        "+ ",
        "               avg_waa = dat.unnamed[[11]],",
        "+ ",
        "               maturity_A50 = dat.unnamed[[12]],",
        "+ ",
        "               maturity_A95 = dat.unnamed[[13]],",
        "+ ",
        "               eps=0.01,",
        "+ ",
        "               flag=flag)",
        "+ ",
        "  return(Data)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "##################################",
        "> ",
        "# Run Operating Model and Store output in separate folders",
        "> ",
        "##################################",
        "> ",
        "",
        "> ",
        "library(doParallel)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(tidyr)",
        "> ",
        "library(prodlim)",
        "> ",
        "library(R2admb)",
        "> ",
        "",
        "> ",
        "source(here::here(\"src/vhs_age_stage_om.R\"))",
        "> ",
        "source(here::here(\"src/fun_obs_mod.R\"))",
        "> ",
        "source(here::here(\"src/fun_write_dat.R\"))",
        "> ",
        "source(here::here(\"src/fun_write_truth.R\"))",
        "> ",
        "source(file=paste0(here::here(\"src\"),\"/data_reader.R\"))",
        "> ",
        "",
        "> ",
        "# Operating model initialization",
        "> ",
        "nyr=200",
        "> ",
        "nage=8",
        "> ",
        "nstage=3",
        "> ",
        "ndays=120",
        "> ",
        "avg_waa=c(70, 94, 115, 134, 150, 160, 165, 168)",
        "> ",
        "",
        "> ",
        "# vhs_trans_rate_I=0",
        "> ",
        "# vhs_trans_rate_C=0",
        "> ",
        "# vhs_mort_rate=0",
        "> ",
        "# vhs_rec_rate=0",
        "> ",
        "",
        "> ",
        "vhs_trans_rate_I=0.01",
        "> ",
        "vhs_trans_rate_C=0.000001",
        "> ",
        "vhs_mort_rate=11/365",
        "> ",
        "vhs_rec_rate=26/365",
        "> ",
        "dep_scaling=0 # scaling exponent for frequency (dep_scaling=0) to density dependent (dep_scaling=1) transmission",
        "> ",
        "",
        "> ",
        "1-exp(-vhs_mort_rate)",
        "[1] 0.0296874\n",
        "> ",
        "1-exp(-vhs_rec_rate)",
        "[1] 0.068755\n",
        "> ",
        "",
        "> ",
        "fishing_mort=0 # Fishing mortality rate (year^-1)",
        "> ",
        "survey_selA50 <- 3",
        "> ",
        "survey_selA95 <- 4",
        "> ",
        "maturity_A50 <- 3",
        "> ",
        "maturity_A95 <- 4",
        "> ",
        "disease_vulA50 <- 1",
        "> ",
        "disease_vulA95 <- 2",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Obsevation model initialization",
        "> ",
        "sage = 0",
        "> ",
        "comp_samp_size = 200",
        "> ",
        "antibody_comp_samp_size = 200",
        "> ",
        "survey_cv = 0.3",
        "> ",
        "obs_years = 151:nyr",
        "> ",
        "n_obs_yr = length(obs_years)",
        "> ",
        "",
        "> ",
        "N_sims <- 500",
        "> ",
        "mainpath <- here::here(\"results/simulations/\")",
        "> ",
        "# operating_model <- paste0(mainpath,\"om1_large samp_runs/\")",
        "> ",
        "# operating_model <- paste0(mainpath,\"om1_small samp_runs/\")",
        "> ",
        "operating_model <- paste0(mainpath,\"om1_young sus vulnerable_runs/\")",
        "> ",
        "",
        "> ",
        "set.seed(91827374)",
        "> ",
        "",
        "> ",
        "rseeds <- runif(N_sims,100,10^7)",
        "> ",
        "#rseeds <- 3251557",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "dir.create(operating_model)",
        "> ",
        "",
        "> ",
        "cl <- makeCluster(6)",
        "> ",
        "registerDoParallel(cl)",
        "> ",
        "ptm <- proc.time()",
        "> ",
        "i=1",
        "> ",
        "om_runs <- foreach(i=iter(1:N_sims,chunksize=10)) %dopar%{",
        "+ ",
        "# foreach(i=1){",
        "+ ",
        "  rseed = round(rseeds[i])",
        "+ ",
        "  # Create folder simulated data set titled \"rseed_###\"",
        "+ ",
        "  modelPath <- paste0(operating_model,\"/rseed_\",rseed)",
        "+ ",
        "  ",
        "+ ",
        "  dir.create(modelPath)",
        "+ ",
        "  ",
        "+ ",
        "  setwd(modelPath)",
        "+ ",
        "  ",
        "+ ",
        "  # Run OM",
        "+ ",
        "  run.1 = vhs.asa(nyr,nage,nstage,ndays,avg_waa,vhs_trans_rate_I,vhs_trans_rate_C,vhs_mort_rate,vhs_rec_rate,dep_scaling,",
        "+ ",
        "                  fishing_mort,survey_selA50,survey_selA95,maturity_A50,maturity_A95,disease_vulA50,disease_vulA95,rseed)",
        "+ ",
        "  Nya = run.1$Nya[obs_years,]",
        "+ ",
        "  predicted_comps = run.1$predicted_comps[obs_years,]",
        "+ ",
        "  predicted_immune_comps = run.1$predicted_immune_comps[obs_years,]",
        "+ ",
        "  predicted_survey = run.1$predicted_survey[obs_years]",
        "+ ",
        "  Cya = run.1$Cya[obs_years,]",
        "+ ",
        "  N_catch = run.1$N_catch[obs_years]",
        "+ ",
        "  catches = run.1$catches[obs_years]",
        "+ ",
        "  catch_comps = run.1$catch_comps[obs_years,]",
        "+ ",
        "  SSB = run.1$SSB[obs_years]",
        "+ ",
        "  Sya = run.1$Sya[obs_years,]",
        "+ ",
        "  Nya_new_infect = run.1$Nya_new_infect[obs_years,]",
        "+ ",
        "  Nya_sus = run.1$Nya_sus[obs_years,]",
        "+ ",
        "  Nya_sel_sus = run.1$Nya_sel_sus[obs_years,]",
        "+ ",
        "  survey_slx = run.1$survey_slx",
        "+ ",
        "  ",
        "+ ",
        "  day.peak.prevalence = run.1$day.max.prevalence[obs_years]",
        "+ ",
        "  outbreak.dur.inci = run.1$duration.incidence[obs_years]",
        "+ ",
        "  outbreak.dur.prev = run.1$duration.prevalence[obs_years]",
        "+ ",
        "  peak.inci = run.1$max.incidence[obs_years]",
        "+ ",
        "  peak.prev = run.1$max.prevalence[obs_years]",
        "+ ",
        "  true_immune = run.1$true_prop_immune[obs_years]",
        "+ ",
        "  obs_immune = run.1$obs_prop_immune[obs_years]",
        "+ ",
        "  ",
        "+ ",
        "  # Check for negative or non-exisitent numbers",
        "+ ",
        "  flag = 0",
        "+ ",
        "  if(any(run.1$Nya<=0)){",
        "+ ",
        "    flag = 1",
        "+ ",
        "  }else if(any(is.nan(run.1$Nya))){",
        "+ ",
        "    flag = 2",
        "+ ",
        "  }else if(any(is.na(run.1$Nya))){",
        "+ ",
        "    flag = 3",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # Run Obs mode",
        "+ ",
        "  observations <- fun_obs_mod(obs_years,Nya,comp_samp_size,",
        "+ ",
        "                              predicted_comps,survey_slx,",
        "+ ",
        "                              predicted_immune_comps,antibody_comp_samp_size,",
        "+ ",
        "                              predicted_survey,survey_cv,Cya,N_catch,",
        "+ ",
        "                              rseed)",
        "+ ",
        "  survey_obs = observations$survey_obs",
        "+ ",
        "  comp_obs = observations$comp_obs",
        "+ ",
        "  antibody_obs = observations$antibody_obs",
        "+ ",
        "  fun_write_dat(obs_years,nyr,sage,nage,comp_samp_size,antibody_comp_samp_size,",
        "+ ",
        "                survey_obs,catches,catch_comps,",
        "+ ",
        "                comp_obs,antibody_obs,avg_waa,maturity_A50,maturity_A95,",
        "+ ",
        "                rseed,flag)",
        "+ ",
        "  ",
        "+ ",
        "  # Write truth to separate files for quantities of interest",
        "+ ",
        "  fun_write_truth(SSB,Nya,Nya_new_infect,Nya_sel_sus,Nya_sus,Sya,",
        "+ ",
        "                  outbreak.dur.inci,outbreak.dur.prev,peak.inci,peak.prev,true_immune,obs_immune,day.peak.prevalence,rseed,flag)",
        "+ ",
        "}",
        "> ",
        "simtime_1 <- proc.time() - ptm",
        "> ",
        "stopCluster(cl)",
        "> ",
        "simtime_1",
        "    user   system  elapsed \n   6.069    3.688 1040.245 \n",
        "> ",
        "1040/60",
        "[1] 17.33333\n",
        "> ",
        "EM_dir <- here::here(\"results/em1/\")",
        "> ",
        "setwd(EM_dir)",
        "> ",
        "scenario <- \"young susceptibles mixing\"",
        "> ",
        "",
        "> ",
        "# Parameter list with names - length(Params) should =length(par_sizes)+1",
        "> ",
        "nage=8",
        "> ",
        "nyr_obs=50",
        "> ",
        "",
        "> ",
        "Params = list(dummy=                    0,            #1",
        "+ ",
        "              ab_logit_midpoint=        0.5,          #2",
        "+ ",
        "              ab_logit_k=               10,           #3",
        "+ ",
        "              ab_logit_max=             0.3,          #4",
        "+ ",
        "              ac_coef_rec=              0.6,          #5",
        "+ ",
        "              natural_mortality=        0.25,         #6",
        "+ ",
        "              log_Ninit=                4,            #7",
        "+ ",
        "              log_rbar=                 4,            #8",
        "+ ",
        "              log_q_survey=             -0.5,         #9",
        "+ ",
        "              plus_group_mortality=     1.5,          #10",
        "+ ",
        "              log_SD_survey=            -1.203973,    #11",
        "+ ",
        "              log_sigma_R=              0.3364722,    #12",
        "+ ",
        "              log_sigma_Ninit=          0.3364722,    #13",
        "+ ",
        "              recov_rate=               0.5,          #14",
        "+ ",
        "              selA50=                   1,            #15",
        "+ ",
        "              selA95=                   2,            #16",
        "+ ",
        "              survey_selA50=            3.5,            #17",
        "+ ",
        "              survey_selA95=            4.5,            #18",
        "+ ",
        "              disease_selA50=           3.9,            #19",
        "+ ",
        "              disease_selA95=           4.9,            #20",
        "+ ",
        "              #log_Ninit_devs=         c(0.458693,-0.143487,-0.477089,-1.02463,0.224749,-0.357725,0.885003,0.744641,0.238758),",
        "+ ",
        "              #log_rbar_devs=          c(0.55374,-0.024794,0.578113,0.247497,0.940703,0.295339,-0.223225,-0.00762502,0.152574,0.0182584,0.111607,0.080687,0.340707,-0.684164,0.122742,-0.245559,-0.841673,0.114844,0.342979,-0.228557,0.453561,0.200792,0.662165,0.383346,0.32553,0.746135,1.57443,-0.468829,0.00383303,0.549472))",
        "+ ",
        "              log_Ninit_devs=         rep(0.0,times=nage-1),",
        "+ ",
        "              log_rbar_devs=          rep(0.0,times=nyr_obs ),",
        "+ ",
        "              init_immune=            rep(0,times=nage),",
        "+ ",
        "              tran_infec_rate=        rep(0.5,times=nyr_obs))",
        "> ",
        "              #tran_infec_rate=        rep(1,times=nyr_obs))",
        "> ",
        "infec_rate_bounds = c(0,1)",
        "> ",
        "#infec_rate_bounds = c(-Inf,Inf)",
        "> ",
        "",
        "> ",
        "Map_base <- Params",
        "> ",
        "LB <- c(-Inf, 0.1, 1,  0.2, 0, 0.15, 1, 1, -2, 0.25, -4, -4, -4, 0.01, 0.5, 1, 0.5, 1, 0, 0, rep(-5,nage-1), rep(-5,nyr_obs), rep(0.0,times=nage), rep(infec_rate_bounds[1],times=nyr_obs))",
        "> ",
        "UB <- c( Inf, 0.9, 20, 0.5, 1, 0.6,  8, 8, 0,  2,    0.5,  0.7,  0.7,  1.0, 5,   6, 5,   6, 6, 6, rep(5,nage-1),  rep(5,nyr_obs ), rep(1.0,times=nage), rep(infec_rate_bounds[2], times=nyr_obs))",
        "> ",
        "",
        "> ",
        "for(i in 1:(length(Map_base))){",
        "+ ",
        "  Map_base[[i]] <- factor(rep(NA,length(Map_base[[i]])))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# For estimating equal numbers in each age at beginning",
        "> ",
        "#RE <- c('log_rbar_devs')",
        "> ",
        "#map_all <- Map_base[c(1,2,3,4,5,6,9,11,13,15,16,21,23)]",
        "> ",
        "",
        "> ",
        "# For estimating initial numbers-at-age, instead of constant",
        "> ",
        "RE <- c('log_rbar_devs','log_Ninit_devs')",
        "> ",
        "map_all <- Map_base[c(1,2,3,4,5,6,9,11,15,16,23)]",
        "> ",
        "",
        "> ",
        "# For testing without disease",
        "> ",
        "#RE <- c('log_rbar_devs','log_Ninit_devs')",
        "> ",
        "#map_all <- Map_base[c(1,2,3,4,5,6,9,11,14,15,16,19,20,23,24)]",
        "> ",
        "",
        "> ",
        "bound.ind <- which(names(unlist(Params))%in%",
        "+ ",
        "                     names(unlist(Params[-which(names(Params)%in%names(map_all) | names(Params)%in%RE)])))",
        "> ",
        "# names(unlist(Params))[bound.ind]",
        "> ",
        "LB_temp <- LB[bound.ind]",
        "> ",
        "UB_temp <- UB[bound.ind]",
        "> ",
        "",
        "> ",
        "i=1",
        "> ",
        "",
        "> ",
        "ptm <- proc.time()",
        "> ",
        "cl <- makeCluster(6)",
        "> ",
        "registerDoParallel(cl)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "em_runs <- foreach(i=iter(1:N_sims,chunksize=10),.combine=rbind) %dopar%{",
        "+ ",
        "#em_runs <- foreach(i=1:60,.combine=rbind) %dopar%{",
        "+ ",
        "#em_runs <- foreach(i=1:6,.combine=rbind) %dopar%{",
        "+ ",
        "  require(TMB)",
        "+ ",
        "  library(TMB)",
        "+ ",
        "# for(i in 1:(N_sims)){",
        "+ ",
        "  # Set WD to current simulation rseed",
        "+ ",
        "  rseed = round(rseeds[i])",
        "+ ",
        "  modelPath <- paste0(operating_model,\"/rseed_\",rseed)",
        "+ ",
        "  #modelPath <- paste0(operating_model,\"rseed_7753741/\")",
        "+ ",
        "  setwd(modelPath)",
        "+ ",
        "  ",
        "+ ",
        "  # Copy EM from directory to simulations directory",
        "+ ",
        "  #filestocopy <- list.files(EM_dir)",
        "+ ",
        "  #file.copy(from=paste0(EM_dir,filestocopy), to=modelPath, overwrite = TRUE)",
        "+ ",
        "  ",
        "+ ",
        "  # Read in truth by which I will compare my results (FIX)",
        "+ ",
        "  true_SSB <- data_reader(filename=\"truth.dat\")[[2]] # This is nyr - we want to start at nyr_tobefit",
        "+ ",
        "  true_REC <- data_reader(filename=\"truth.dat\")[[3]]",
        "+ ",
        "  true_INF <- data_reader(filename=\"truth.dat\")[[4]][,6]",
        "+ ",
        "  ",
        "+ ",
        "  # Read in data",
        "+ ",
        "  Data <- read.in.data()",
        "+ ",
        "  flag <- Data[[15]]",
        "+ ",
        "  Data[[15]] <- NULL",
        "+ ",
        "  ",
        "+ ",
        "  if(flag==0){",
        "+ ",
        "    # Fit the model",
        "+ ",
        "    model_version=\"vhs_asa_em1\"",
        "+ ",
        "    dyn.load(dynlib(paste0(EM_dir,model_version)))",
        "+ ",
        "    model <- MakeADFun( data=Data, parameters=Params, DLL=model_version, map=map_all, random=RE, hessian=T, silent=TRUE)",
        "+ ",
        "    fit <- nlminb(model$par, model$fn, model$gr,control=list( sing.tol=1e-20,rel.tol=1e-12,eval.max=1000000,iter.max=10000),",
        "+ ",
        "                  lower=LB_temp,upper=UB_temp)",
        "+ ",
        "    ",
        "+ ",
        "    #(model$report()$infec_rate-true_INF)",
        "+ ",
        "    #(model$report()$SSB-true_SSB)/true_SSB",
        "+ ",
        "    #(model$report()$recruits_obs-true_REC)/true_REC",
        "+ ",
        "    #model$report()$f_llk",
        "+ ",
        "    #model$report()$disease_slx",
        "+ ",
        "    #model$report()$survey_slx",
        "+ ",
        "    #fit$par",
        "+ ",
        "    ",
        "+ ",
        "    saveRDS(fit,   file=paste0(model_version,\"_\",scenario,\"_parameters.RDS\"))",
        "+ ",
        "    saveRDS(model, file=paste0(model_version,\"_\",scenario,\"_model_output.RDS\"))",
        "+ ",
        "    ",
        "+ ",
        "    # Store the estimates",
        "+ ",
        "    est_SSB <- model$report()$SSB",
        "+ ",
        "    est_REC <- model$report()$recruits_obs",
        "+ ",
        "    est_INF <- model$report()$infec_rate",
        "+ ",
        "    ",
        "+ ",
        "    converg <- fit$convergence",
        "+ ",
        "    converg_message <- fit$message",
        "+ ",
        "  }else{",
        "+ ",
        "    # Store the estimates",
        "+ ",
        "    est_SSB <- rep(NA,length.out=length(true_SSB))",
        "+ ",
        "    est_REC <- rep(NA,length.out=length(true_REC))",
        "+ ",
        "    est_INF <- rep(NA,length.out=length(true_INF))",
        "+ ",
        "    ",
        "+ ",
        "    converg <- NA",
        "+ ",
        "    converg_message <- NA",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if(i%%50==0){",
        "+ ",
        "    print(paste0(\"Iteration: \",i,\"; Time elapsed: \",proc.time()[3] - ptm[3]))",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  sim.results <- data.frame(seed=rseed,",
        "+ ",
        "                            true_ssb=true_SSB,",
        "+ ",
        "                            est_ssb=est_SSB,",
        "+ ",
        "                            true_rec=true_REC,",
        "+ ",
        "                            est_rec=est_REC,",
        "+ ",
        "                            true_infection=true_INF,",
        "+ ",
        "                            est_infection=est_INF,",
        "+ ",
        "                            convergence=converg,",
        "+ ",
        "                            message=converg_message)",
        "+ ",
        "",
        "+ ",
        "  sim.results",
        "+ ",
        "}",
        "\n",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2
    ]
}