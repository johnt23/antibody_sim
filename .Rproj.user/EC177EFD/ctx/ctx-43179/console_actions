{
    "data" : [
        "+ ",
        "  theme(panel.border=element_rect(fill=NA),",
        "+ ",
        "        plot.title = element_text(hjust = 0.5),",
        "+ ",
        "        axis.text.y = element_text(size=font.size-2),",
        "+ ",
        "        axis.text.x = element_text(size=font.size-2,angle=45,vjust=0.5),",
        "+ ",
        "        axis.ticks.x= element_line(color=\"black\"),",
        "+ ",
        "        # axis.title.y = element_text(size=font.size+2),",
        "+ ",
        "        axis.title.y = element_blank(),",
        "+ ",
        "        plot.margin = margin(0.5, 0.5, 0.5, 0.5, \"cm\"),",
        "+ ",
        "        panel.spacing = unit(0.5, \"lines\"),",
        "+ ",
        "        legend.position =\"none\")",
        "> ",
        "i=1",
        "> ",
        "rseed = round(rseeds[i])",
        "> ",
        "modelPath <- paste0(operating_model,\"rseed_\",rseed)",
        "> ",
        "setwd(modelPath)",
        "> ",
        "pars <- readRDS(paste0(model_version,\"_\",scenario,\"_parameters.RDS\"))",
        "> ",
        "pars$par",
        "      log_Ninit        log_rbar     log_sigma_R log_sigma_Ninit   survey_selA50   survey_selA95  disease_selA50  disease_selA95   fix_recov_par \n    4.450006561     6.226458062     0.055433713    -0.001742832     2.961348180     3.861771916     1.500000000     2.000000000     0.440043437 \ntran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate \n    1.000000000     0.868883882     0.000000000     0.000000000     0.647704708 ",
        "    0.000000000     0.624305162     1.000000000     0.567522824 \ntran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate \n    0.561933850     0.000000000     0.000000000     1.000000000     1.000000000     0.000000000     0.000000000     0.725451017     0.000000000 \ntran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate \n    0.000000000 ",
        "    0.000000000     0.600404006     0.105405593     0.533968152     0.500893235     1.000000000     0.000000000     0.000000000 \ntran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate \n    0.000000000     0.378157931     0.000000000     0.468594085     0.064268301     0.698883335     1.000000000     0.000000000     0.077640360 \ntran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate ",
        "tran_infec_rate tran_infec_rate tran_infec_rate \n    0.961504301     1.000000000     0.000000000     0.748713070     0.186861275     0.000000000     0.531103552     0.931598903     0.000000000 \ntran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate tran_infec_rate \n    0.000000000     0.974798399     1.000000000     1.000000000     0.825344792 \n",
        "> ",
        "simtime_2",
        "    user   system  elapsed \n  30.364   35.975 1862.154 \n",
        "> ",
        "1862/60",
        "[1] 31.03333\n",
        "> ",
        "sort(rseeds)",
        "  [1]   34029.23   66556.43  113689.91  115127.20  185081.56  224838.12  231691.63  242053.16  251956.83  252338.46  280616.61  294456.76  328538.08\n [14]  341502.24  366968.06  385484.03  398229.53  421164.75  482124.70  490741.70  498409.60  506738.08  507196.44  510158.74  536094.08  583124.47\n [27]  620325.92  629505.48  638920.73  649957.02  667981.88  683613.64  724520.00  724673.39  732743.68  738859.78  750837.62  772416.68  778178.14\n [40]  790327.76  795290.79  812462.01  854685.54  864501.99  869687.15",
        "  871671.08  923447.04  926971.80  938299.62  970866.69  981177.24  996047.14\n [53] 1025172.69 1041473.36 1055672.65 1090257.35 1096147.16 1099082.81 1128660.93 1129971.81 1141693.49 1149561.32 1180099.73 1203158.63 1207561.84\n [66] 1213599.07 1218233.29 1264470.37 1273015.62 1353091.28 1353741.46 1389028.98 1407325.98 1423970.12 1497613.97 1507039.07 1540864.46 1595241.14\n [79] 1596657.08 1643996.20 1646032.10 1655376.47 1730932.43 1733783.53 1758832.80 1787769.06 1791640.48 1849617.43 1859879.61 1869955.67",
        " 1874544.95\n [92] 1875122.61 1918003.06 1978820.32 1980660.62 1981836.10 2040573.09 2063632.81 2071400.20 2072014.87 2086144.89 2108808.91 2114456.80 2133742.27\n[105] 2147019.15 2162980.62 2198949.66 2204805.90 2209622.54 2237007.18 2240428.81 2254205.94 2256212.34 2288119.03 2289458.08 2304893.21 2305457.12\n[118] 2356591.23 2362159.27 2373240.95 2380729.97 2385294.19 2421367.72 2425809.76 2453087.83 2498213.93 2545790.39 2549565.52 2563017.13 2610228.85\n[131] 2612724.02 2616881.18 2638440.13 2660121.23 2668420.64",
        " 2673719.04 2675253.77 2683301.24 2735843.18 2749551.86 2765873.13 2770367.13 2771544.44\n[144] 2773933.86 2783836.84 2803364.35 2839323.97 2860239.13 2885659.06 2896164.02 2914936.11 2946420.80 2989722.49 3000052.38 3006145.49 3021858.23\n[157] 3043447.98 3076080.37 3102352.96 3104501.01 3107390.25 3114403.25 3124337.74 3168498.24 3194125.53 3199297.68 3293386.98 3306205.07 3306616.92\n[170] 3312118.60 3362959.65 3365222.92 3373236.53 3395324.53 3408644.54 3413244.87 3464755.61 3489652.02 3497557.82 3507561.29",
        " 3551590.85 3559507.43\n[183] 3561010.76 3593776.31 3660557.54 3746557.26 3786128.25 3821527.44 3827951.85 3835351.91 3871308.62 3885580.95 3916745.71 3921954.83 3952051.28\n[196] 3961904.78 4003148.56 4008908.03 4070462.05 4085442.74 4098669.30 4119902.18 4124045.43 4162450.18 4188954.30 4193457.83 4205406.82 4217481.66\n[209] 4229941.83 4237657.08 4270554.57 4277235.88 4298437.69 4302758.64 4303014.62 4308788.42 4317504.67 4359319.93 4386203.93 4414832.97 4444089.74\n[222] 4444297.77 4457619.70 4461868.05 4473883.08",
        " 4479684.08 4495763.44 4510243.13 4541285.00 4552538.86 4585565.14 4587977.03 4621183.92 4621784.98\n[235] 4641217.44 4648150.41 4720131.15 4765598.65 4774296.18 4799359.38 4802269.04 4823151.90 4834335.52 4875273.56 4902634.50 4936976.05 4949133.94\n[248] 5013084.02 5015702.12 5019456.52 5028616.78 5050603.26 5056479.87 5067613.14 5071475.16 5080013.82 5118995.48 5131127.18 5131222.50 5137224.97\n[261] 5140817.39 5153982.96 5188989.90 5200070.91 5214390.16 5265694.91 5272182.68 5297791.10 5333425.91 5345036.75",
        " 5355254.06 5358617.68 5365512.89\n[274] 5370421.69 5432502.67 5442251.78 5446524.97 5446550.60 5447051.94 5458721.30 5459865.96 5495522.26 5500280.87 5503935.26 5518317.20 5540521.54\n[287] 5559423.09 5566634.31 5572126.49 5580506.75 5613533.98 5690863.65 5709726.94 5729444.82 5746221.43 5769224.05 5802741.16 5817247.35 5820330.85\n[300] 5881134.92 5893074.02 5909957.16 5931760.54 5962296.95 5978417.61 5990607.63 5998859.53 5998946.06 6014797.91 6029673.97 6040382.73 6055325.69\n[313] 6059335.11 6088742.03 6094533.87",
        " 6105046.76 6154639.33 6184359.80 6187766.32 6201149.14 6202521.59 6240740.03 6248209.59 6248310.34 6255023.77\n[326] 6279617.22 6309747.96 6344527.88 6355917.78 6383118.73 6405356.92 6467275.98 6473280.32 6478666.08 6498357.31 6515611.12 6573539.45 6585961.46\n[339] 6586897.74 6593242.85 6598283.41 6609072.92 6616154.44 6647103.56 6672765.55 6682961.96 6694933.59 6719745.40 6727069.49 6731977.69 6738207.73\n[352] 6757678.21 6762447.67 6778074.49 6795565.82 6823049.09 6828381.66 6904653.69 6907589.27 6966473.21",
        " 6966551.02 6980795.80 6981108.45 6986448.01\n[365] 7045467.85 7059793.42 7184013.19 7247409.44 7269998.29 7274891.97 7282427.25 7289850.92 7305397.48 7321505.48 7371161.08 7399440.26 7458866.38\n[378] 7461944.25 7482883.57 7490319.57 7490840.14 7504744.49 7588953.82 7648318.70 7656276.76 7676958.35 7679282.00 7706670.47 7741967.34 7751537.08\n[391] 7752279.90 7753741.07 7760614.53 7781978.33 7782909.87 7824421.44 7854439.20 7868104.19 7887905.20 7926781.25 7996207.66 8003608.29 8017409.23\n[404] 8047246.06 8059951.61",
        " 8096218.09 8100738.55 8104113.53 8130853.76 8133106.92 8242541.54 8296534.37 8312592.67 8320755.19 8335601.45 8349212.77\n[417] 8366247.83 8435863.33 8449451.12 8459936.03 8464077.51 8471917.40 8485504.90 8498826.23 8505383.73 8512360.68 8526163.67 8537458.18 8595040.49\n[430] 8610537.15 8648010.98 8648621.70 8711190.11 8768136.49 8770743.31 8779229.37 8803180.35 8825401.18 8827162.36 8828959.03 8836937.12 8859339.13\n[443] 8896710.00 8979641.16 9018095.32 9022497.18 9023986.61 9044698.20 9046502.71 9052785.10",
        " 9063482.31 9104026.45 9110454.63 9111220.23 9173641.51\n[456] 9174019.40 9215738.58 9215877.13 9231023.00 9248314.70 9272256.36 9283815.12 9295320.37 9302526.00 9312203.97 9315823.30 9339974.33 9388143.66\n[469] 9400034.52 9454522.59 9469282.76 9492243.50 9493613.74 9498833.86 9522314.62 9537742.74 9548459.99 9571619.85 9585824.99 9589097.91 9602794.74\n[482] 9628008.36 9628632.35 9657818.71 9661467.05 9715823.83 9720974.41 9803830.87 9827375.23 9848487.37 9850181.13 9854771.27 9871476.35 9877959.47\n[495] 9921786.95",
        " 9921976.88 9947787.48 9951460.37 9966352.86 9986805.13\n",
        "> ",
        "rseeds <- sort(rseeds)",
        "> ",
        "#  simulation_test.R",
        "> ",
        "#  Created by John Trochta",
        "> ",
        "#  This code runs a single M to generate new data and fits one TMB model (EM).",
        "> ",
        "#  The primary purporse of this program is to test the models and make sure everything is working",
        "> ",
        "#  ",
        "> ",
        "options(scipen=9)",
        "> ",
        "setwd(here::here())",
        "> ",
        "########",
        "> ",
        "",
        "> ",
        "# Loading in the data",
        "> ",
        "# Store the file names from which data is available",
        "> ",
        "read.in.data  <- function(){",
        "+ ",
        "  source(file=paste0(here::here(\"src\"),\"/data_reader.R\"))",
        "+ ",
        "  dat.unnamed <- data_reader(filename=\"vhs_asa_em.dat\") # This is nyr - we want to start at nyr_tobefit",
        "+ ",
        "  ",
        "+ ",
        "  flag = dat.unnamed[[1]]",
        "+ ",
        "  dat.unnamed[[1]] = NULL",
        "+ ",
        "  ",
        "+ ",
        "  Data <- list(nyr = dat.unnamed[[1]],",
        "+ ",
        "               sage = dat.unnamed[[2]],",
        "+ ",
        "               nage = dat.unnamed[[3]],",
        "+ ",
        "               comp_samp_size = dat.unnamed[[4]],",
        "+ ",
        "               catch_comp_samp_size = dat.unnamed[[5]],",
        "+ ",
        "               antibody_comp_samp_size = dat.unnamed[[6]],",
        "+ ",
        "               survey_obs = dat.unnamed[[7]],",
        "+ ",
        "               catches = dat.unnamed[[8]],",
        "+ ",
        "               catch_comps = dat.unnamed[[9]],",
        "+ ",
        "               comp_obs = dat.unnamed[[10]],",
        "+ ",
        "               antibody_obs = dat.unnamed[[11]],",
        "+ ",
        "               avg_waa = dat.unnamed[[12]],",
        "+ ",
        "               maturity_A50 = dat.unnamed[[13]],",
        "+ ",
        "               maturity_A95 = dat.unnamed[[14]],",
        "+ ",
        "               obs_samp_prev = dat.unnamed[[15]],",
        "+ ",
        "               eps=0.01,",
        "+ ",
        "               flag=flag)",
        "+ ",
        "  return(Data)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Running random replicates of the operating model",
        "> ",
        "run_om <- function(nyr,nage,nstage,ndays,avg_waa,fishing_mort,sig_nat_mor,log_sigma_R,",
        "+ ",
        "                   vhs_trans_rate_I,vhs_trans_rate_C,vhs_mort_rate,vhs_rec_rate,dep_scaling,",
        "+ ",
        "                   nonlinear_exp_1,nonlinear_exp_2,ignore.carryover.inf,inf_prev_survey,",
        "+ ",
        "                   survey_selA50,survey_selA95,maturity_A50,maturity_A95,disease_vulA50,disease_vulA95,dis_survey_selA50,dis_survey_selA95,selA50,selA95,",
        "+ ",
        "                   sage,comp_samp_size,catch_comp_samp_size,antibody_comp_samp_size,survey_cv,obs_years,nyr_obs,",
        "+ ",
        "                   rseeds,N_sims,operating_model){",
        "+ ",
        "  library(doParallel)",
        "+ ",
        "  ",
        "+ ",
        "  dir.create(operating_model)",
        "+ ",
        "  ",
        "+ ",
        "  i=1",
        "+ ",
        "  ",
        "+ ",
        "  cl <- makeCluster(parallel::detectCores()-2)",
        "+ ",
        "  doParallel::registerDoParallel(cl)",
        "+ ",
        "  # ptm <- proc.time()",
        "+ ",
        "  om_runs <- foreach(i=iter(1:N_sims,chunksize=10)) %dopar%{",
        "+ ",
        "    source(here::here(\"src/vhs_age_stage_om.R\"))",
        "+ ",
        "    source(here::here(\"src/fun_obs_mod.R\"))",
        "+ ",
        "    source(here::here(\"src/fun_write_dat.R\"))",
        "+ ",
        "    source(here::here(\"src/fun_write_truth.R\"))",
        "+ ",
        "    source(file=paste0(here::here(\"src\"),\"/data_reader.R\"))",
        "+ ",
        "    ",
        "+ ",
        "    # foreach(i=1){",
        "+ ",
        "    rseed = round(rseeds[i])",
        "+ ",
        "    # Create folder simulated data set titled \"rseed_###\"",
        "+ ",
        "    modelPath <- paste0(operating_model,\"/rseed_\",rseed)",
        "+ ",
        "    ",
        "+ ",
        "    dir.create(modelPath)",
        "+ ",
        "    ",
        "+ ",
        "    setwd(modelPath)",
        "+ ",
        "    ",
        "+ ",
        "    # Run OM",
        "+ ",
        "    run.1 = vhs.asa(nyr,nage,nstage,ndays,avg_waa,vhs_trans_rate_I,vhs_trans_rate_C,vhs_mort_rate,vhs_rec_rate,dep_scaling,",
        "+ ",
        "                    fishing_mort,survey_selA50,survey_selA95,maturity_A50,maturity_A95,disease_vulA50,disease_vulA95,dis_survey_selA50,dis_survey_selA95,",
        "+ ",
        "                    nonlinear_exp_1,nonlinear_exp_2,sig_nat_mor,selA50,selA95,ignore.carryover.inf,inf_prev_survey,log_sigma_R,rseed)",
        "+ ",
        "    ",
        "+ ",
        "    Nya = run.1$Nya[obs_years,]",
        "+ ",
        "    predicted_comps = run.1$predicted_comps[obs_years,]",
        "+ ",
        "    predicted_immune_comps = run.1$predicted_immune_comps[obs_years,]",
        "+ ",
        "    predicted_survey = run.1$predicted_survey[obs_years]",
        "+ ",
        "    Cya = run.1$Cya[obs_years,]",
        "+ ",
        "    N_catch = run.1$N_catch[obs_years]",
        "+ ",
        "    catches = run.1$catches[obs_years]",
        "+ ",
        "    catch_comps = run.1$catch_comps[obs_years,]",
        "+ ",
        "    SSB = run.1$SSB[obs_years]",
        "+ ",
        "    Sya = run.1$Sya[obs_years,]",
        "+ ",
        "    Nya_new_infect = run.1$Nya_new_infect[obs_years,]",
        "+ ",
        "    Nya_sus = run.1$Nya_sus[obs_years,]",
        "+ ",
        "    Nya_sel_sus = run.1$Nya_sel_sus[obs_years,]",
        "+ ",
        "    survey_slx = run.1$survey_slx",
        "+ ",
        "    dis_survey_slx = run.1$dis_survey_slx",
        "+ ",
        "    true_samp_prev = run.1$true_samp_prev[obs_years,]",
        "+ ",
        "    ",
        "+ ",
        "    day.peak.prevalence = run.1$day.max.prevalence[obs_years]",
        "+ ",
        "    outbreak.dur.inci = run.1$duration.incidence[obs_years]",
        "+ ",
        "    outbreak.dur.prev = run.1$duration.prevalence[obs_years]",
        "+ ",
        "    peak.inci = run.1$max.incidence[obs_years]",
        "+ ",
        "    peak.prev = run.1$max.prevalence[obs_years]",
        "+ ",
        "    true_immune = run.1$true_prop_immune[obs_years]",
        "+ ",
        "    obs_immune = run.1$obs_prop_immune[obs_years]",
        "+ ",
        "    ",
        "+ ",
        "    # Check for negative or non-exisitent numbers",
        "+ ",
        "    flag = 0",
        "+ ",
        "    if(any(run.1$Nya<=0)){",
        "+ ",
        "      flag = 1",
        "+ ",
        "    }else if(any(is.nan(run.1$Nya))){",
        "+ ",
        "      flag = 2",
        "+ ",
        "    }else if(any(is.na(run.1$Nya))){",
        "+ ",
        "      flag = 3",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    # Run Obs mode",
        "+ ",
        "    observations <- fun_obs_mod(obs_years,Nya,comp_samp_size,catch_comp_samp_size,",
        "+ ",
        "                                predicted_comps,survey_slx,dis_survey_slx,",
        "+ ",
        "                                predicted_immune_comps,antibody_comp_samp_size,",
        "+ ",
        "                                predicted_survey,survey_cv,Cya,N_catch,",
        "+ ",
        "                                true_samp_prev,",
        "+ ",
        "                                rseed)",
        "+ ",
        "    survey_obs = observations$survey_obs",
        "+ ",
        "    comp_obs = observations$comp_obs",
        "+ ",
        "    antibody_obs = observations$antibody_obs",
        "+ ",
        "    catch_comps = observations$catch_comps",
        "+ ",
        "    obs_samp_prev = observations$obs_samp_prev",
        "+ ",
        "    fun_write_dat(obs_years,nyr,sage,nage,comp_samp_size,catch_comp_samp_size,antibody_comp_samp_size,",
        "+ ",
        "                  survey_obs,catches,catch_comps,",
        "+ ",
        "                  comp_obs,antibody_obs,avg_waa,maturity_A50,maturity_A95,",
        "+ ",
        "                  obs_samp_prev,",
        "+ ",
        "                  rseed,flag)",
        "+ ",
        "    ",
        "+ ",
        "    # Write truth to separate files for quantities of interest",
        "+ ",
        "    fun_write_truth(SSB,Nya,Nya_new_infect,Nya_sel_sus,Nya_sus,Sya,",
        "+ ",
        "                    outbreak.dur.inci,outbreak.dur.prev,peak.inci,peak.prev,true_immune,obs_immune,day.peak.prevalence,rseed,flag)",
        "+ ",
        "  }",
        "+ ",
        "  # simtime_1 <- proc.time() - ptm",
        "+ ",
        "  stopCluster(cl)",
        "+ ",
        "  ",
        "+ ",
        "  # return(simtime_1)",
        "+ ",
        "  # 07/15/2020 time for 500 runs:  16 mins",
        "+ ",
        "  # 09/26/2020 time for 500 runs:  16.6 mins",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "# Run the estimation model on all operating model simulation",
        "> ",
        "run_em <- function(EM_dir,model_version,operating_model,scenario,nage,nyr_obs,fixed_par_ls,dis_mix_age_thresh,fix_rec_rate,fix_dis_survey_slx,N_sims,rseeds,Params){",
        "+ ",
        "  # Store the file names from which data is available",
        "+ ",
        "  read.in.data  <- function(dis_mix_age_thresh,fix_rec_rate,fix_dis_survey_slx){",
        "+ ",
        "    source(file=paste0(here::here(\"src\"),\"/data_reader.R\"))",
        "+ ",
        "    dat.unnamed <- data_reader(filename=\"vhs_asa_em.dat\") # This is nyr - we want to start at nyr_tobefit",
        "+ ",
        "    ",
        "+ ",
        "    flag = dat.unnamed[[1]]",
        "+ ",
        "    dat.unnamed[[1]] = NULL",
        "+ ",
        "    ",
        "+ ",
        "    Data <- list(nyr = dat.unnamed[[1]],",
        "+ ",
        "                 sage = dat.unnamed[[2]],",
        "+ ",
        "                 nage = dat.unnamed[[3]],",
        "+ ",
        "                 comp_samp_size = dat.unnamed[[4]],",
        "+ ",
        "                 catch_comp_samp_size = dat.unnamed[[5]],",
        "+ ",
        "                 antibody_comp_samp_size = dat.unnamed[[6]],",
        "+ ",
        "                 survey_obs = dat.unnamed[[7]],",
        "+ ",
        "                 catches = dat.unnamed[[8]],",
        "+ ",
        "                 catch_comps = dat.unnamed[[9]],",
        "+ ",
        "                 comp_obs = dat.unnamed[[10]],",
        "+ ",
        "                 antibody_obs = dat.unnamed[[11]],",
        "+ ",
        "                 avg_waa = dat.unnamed[[12]],",
        "+ ",
        "                 maturity_A50 = dat.unnamed[[13]],",
        "+ ",
        "                 maturity_A95 = dat.unnamed[[14]],",
        "+ ",
        "                 obs_samp_prev = dat.unnamed[[15]],",
        "+ ",
        "                 dis_mix_age_thresh = dis_mix_age_thresh,",
        "+ ",
        "                 fix_rec_rate = fix_rec_rate,",
        "+ ",
        "                 fix_dis_survey_slx = fix_dis_survey_slx,",
        "+ ",
        "                 eps=0.01,",
        "+ ",
        "                 flag=flag)",
        "+ ",
        "    return(Data)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  require(TMB)",
        "+ ",
        "  library(TMB)",
        "+ ",
        "  ",
        "+ ",
        "  # Get the cpp code compiled",
        "+ ",
        "  setwd(EM_dir)",
        "+ ",
        "  ",
        "+ ",
        "  # TMB Prep - this compiles the code",
        "+ ",
        "  compile(paste0(model_version,\".cpp\")) ",
        "+ ",
        "  # dyn.load( dynlib(model_version) )",
        "+ ",
        "  ",
        "+ ",
        "  # # Initialize parameters",
        "+ ",
        "  # Params = list(dummy=                    0,                    #1",
        "+ ",
        "  #               ac_coef_rec=              0.6,                  #2",
        "+ ",
        "  #               natural_mortality=        0.25,                 #3",
        "+ ",
        "  #               log_Ninit=                4,                    #4",
        "+ ",
        "  #               log_rbar=                 4,                    #5",
        "+ ",
        "  #               log_q_survey=             -0.5,                 #6",
        "+ ",
        "  #               plus_group_mortality=     0.25,                 #7",
        "+ ",
        "  #               log_SD_survey=            -1.203973,            #8",
        "+ ",
        "  #               log_sigma_R=              0.3364722,            #9",
        "+ ",
        "  #               log_sigma_Ninit=          0.3364722,            #10",
        "+ ",
        "  #               selA50=                   2.5,                  #11",
        "+ ",
        "  #               selA95=                   3,                    #12",
        "+ ",
        "  #               survey_selA50=            3.5,                  #13",
        "+ ",
        "  #               survey_selA95=            4.5,                  #14",
        "+ ",
        "  #               disease_selA50=           1.5,                  #15",
        "+ ",
        "  #               disease_selA95=           2,                    #16",
        "+ ",
        "  #               dis_survey_selA50=        3.5,                  #17",
        "+ ",
        "  #               dis_survey_selA95=        4.5,                  #18",
        "+ ",
        "  #               fix_recov_par=          0,                      #19",
        "+ ",
        "  #               log_Ninit_devs=         rep(0.0,times=nage-1),  #20",
        "+ ",
        "  #               log_rbar_devs=          rep(0.0,times=nyr_obs ),#21",
        "+ ",
        "  #               init_immune=            rep(0,times=nage),      #22",
        "+ ",
        "  #               tran_infec_rate=        rep(0,times=nyr_obs),   #23",
        "+ ",
        "  #               beta_prev_index=        0)                      #24",
        "+ ",
        "  # ",
        "+ ",
        "  #infec_rate_bounds = c(0,1)",
        "+ ",
        "  #infec_rate_bounds = c(-Inf,Inf)",
        "+ ",
        "  ",
        "+ ",
        "  Map_base <- Params",
        "+ ",
        "  ",
        "+ ",
        "  # Indices corresponding to locations in par list above",
        "+ ",
        "  #       1     2    3     4  5  6   7     8    9     10   11   12 13   14 15 16 17   18   19   20              21               22                   23                      24",
        "+ ",
        "  LB <- c(-Inf, 0,   0.15, 1, 1, -2, 0.25, -4,  -4,   -4,  0.5, 1, 0.5, 1, 0, 0, 0.5, 0.5, 0.0, rep(-5,nage-1), rep(-5,nyr_obs), rep(0.0,times=nage), rep(0.0,times=nyr_obs), -50)",
        "+ ",
        "  UB <- c( Inf, 1,   0.6,  8, 8, 0,  2.5,  0.5, 1.5,  1.5, 5,   6, 5,   6, 6, 6, 6,   6,   1.0, rep(5,nage-1),  rep(5,nyr_obs ), rep(1.0,times=nage), rep(1.0, times=nyr_obs), 50)",
        "+ ",
        "  ",
        "+ ",
        "  for(i in 1:(length(Map_base))){",
        "+ ",
        "    Map_base[[i]] <- factor(rep(NA,length(Map_base[[i]])))",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # For incorporating an infection prevalence index",
        "+ ",
        "  RE <- c('log_rbar_devs','log_Ninit_devs')",
        "+ ",
        "  map_all <- Map_base[fixed_par_ls]",
        "+ ",
        "  ",
        "+ ",
        "  bound.ind <- which(names(unlist(Params))%in%",
        "+ ",
        "                       names(unlist(Params[-which(names(Params)%in%names(map_all) | names(Params)%in%RE)])))",
        "+ ",
        "  # names(unlist(Params))[bound.ind]",
        "+ ",
        "  LB_temp <- LB[bound.ind]",
        "+ ",
        "  UB_temp <- UB[bound.ind]",
        "+ ",
        "  ",
        "+ ",
        "  i=1",
        "+ ",
        "  ",
        "+ ",
        "  ptm <- proc.time()",
        "+ ",
        "  cl <- makeCluster(parallel::detectCores()-2)",
        "+ ",
        "  registerDoParallel(cl)",
        "+ ",
        "  ",
        "+ ",
        "  em_runs <- foreach(i=iter(1:N_sims,chunksize=10),.combine=rbind) %dopar%{",
        "+ ",
        "    #em_runs <- foreach(i=1:60,.combine=rbind) %dopar%{",
        "+ ",
        "    #em_runs <- foreach(i=1:6,.combine=rbind) %dopar%{",
        "+ ",
        "    ",
        "+ ",
        "    source(file=paste0(here::here(\"src\"),\"/data_reader.R\"))",
        "+ ",
        "    require(TMB)",
        "+ ",
        "",
        "+ ",
        "    # Set WD to current simulation rseed",
        "+ ",
        "    rseed = round(rseeds[i])",
        "+ ",
        "    modelPath <- paste0(operating_model,\"rseed_\",rseed,\"/\")",
        "+ ",
        "    #modelPath <- paste0(operating_model,\"rseed_7753741/\")",
        "+ ",
        "    setwd(modelPath)",
        "+ ",
        "    ",
        "+ ",
        "    if(file.exists(\"truth.dat\")){",
        "+ ",
        "      # Copy EM from directory to simulations directory",
        "+ ",
        "      #filestocopy <- list.files(EM_dir)",
        "+ ",
        "      #file.copy(from=paste0(EM_dir,filestocopy), to=modelPath, overwrite = TRUE)",
        "+ ",
        "      ",
        "+ ",
        "      # Read in truth by which I will compare my results (FIX)",
        "+ ",
        "      true_SSB <- data_reader(filename=\"truth.dat\")[[2]][,1] # This is nyr - we want to start at nyr_tobefit",
        "+ ",
        "      true_REC <- data_reader(filename=\"truth.dat\")[[3]][,1]",
        "+ ",
        "      true_INF <- data_reader(filename=\"truth.dat\")[[4]][,6]",
        "+ ",
        "      ",
        "+ ",
        "      # Read in data",
        "+ ",
        "      Data <- read.in.data(dis_mix_age_thresh,fix_rec_rate,fix_dis_survey_slx)",
        "+ ",
        "      flag <- Data[[20]]",
        "+ ",
        "      Data[[20]] <- NULL",
        "+ ",
        "      ",
        "+ ",
        "      if(flag==0){",
        "+ ",
        "        # Fit the model",
        "+ ",
        "        # model_version=\"vhs_asa_em_v2\"",
        "+ ",
        "        dyn.load(dynlib(paste0(EM_dir,model_version)))",
        "+ ",
        "        model <- MakeADFun( data=Data, parameters=Params, DLL=model_version, map=map_all, random=RE, hessian=T, silent=TRUE)",
        "+ ",
        "        fit <- nlminb(model$par, model$fn, model$gr,control=list( sing.tol=1e-20,rel.tol=1e-12,eval.max=1000000,iter.max=10000),",
        "+ ",
        "                      lower=LB_temp,upper=UB_temp)",
        "+ ",
        "        ",
        "+ ",
        "        #(model$report()$infec_rate-true_INF)",
        "+ ",
        "        #(model$report()$SSB-true_SSB)/true_SSB",
        "+ ",
        "        #(model$report()$recruits_obs-true_REC)/true_REC",
        "+ ",
        "        #model$report()$f_llk",
        "+ ",
        "        #model$report()$disease_slx",
        "+ ",
        "        #model$report()$survey_slx",
        "+ ",
        "        #fit$par",
        "+ ",
        "        #trial <- model$report()",
        "+ ",
        "        ",
        "+ ",
        "        saveRDS(fit,   file=paste0(model_version,\"_\",scenario,\"_parameters.RDS\"))",
        "+ ",
        "        saveRDS(model, file=paste0(model_version,\"_\",scenario,\"_model_output.RDS\"))",
        "+ ",
        "        ",
        "+ ",
        "        # Store the estimates",
        "+ ",
        "        est_SSB <- model$report()$SSB",
        "+ ",
        "        est_REC <- model$report()$recruits_obs",
        "+ ",
        "        est_INF <- model$report()$infec_rate",
        "+ ",
        "        ",
        "+ ",
        "        converg <- fit$convergence",
        "+ ",
        "        converg_message <- fit$message",
        "+ ",
        "      }else{",
        "+ ",
        "        # Store the estimates",
        "+ ",
        "        est_SSB <- rep(NA,length.out=length(true_SSB))",
        "+ ",
        "        est_REC <- rep(NA,length.out=length(true_REC))",
        "+ ",
        "        est_INF <- rep(NA,length.out=length(true_INF))",
        "+ ",
        "        ",
        "+ ",
        "        converg <- NA",
        "+ ",
        "        converg_message <- NA",
        "+ ",
        "      }",
        "+ ",
        "      ",
        "+ ",
        "    }else{",
        "+ ",
        "      true_SSB = rep(NA,times=nyr_obs)",
        "+ ",
        "      est_SSB = rep(NA,times=nyr_obs)",
        "+ ",
        "      true_REC = rep(NA,times=nyr_obs)",
        "+ ",
        "      est_REC = rep(NA,times=nyr_obs)",
        "+ ",
        "      true_INF = rep(NA,times=nyr_obs)",
        "+ ",
        "      est_INF = rep(NA,times=nyr_obs)",
        "+ ",
        "      converg = NA",
        "+ ",
        "      converg_message = \"Faulty OM values\"",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    if(i%%50==0){",
        "+ ",
        "      print(paste0(\"Iteration: \",i,\"; Time elapsed: \",proc.time()[3] - ptm[3]))",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    sim.results <- data.frame(seed=rseed,",
        "+ ",
        "                              year=1:length(true_SSB),",
        "+ ",
        "                              true_ssb=true_SSB,",
        "+ ",
        "                              est_ssb=est_SSB,",
        "+ ",
        "                              true_rec=true_REC,",
        "+ ",
        "                              est_rec=est_REC,",
        "+ ",
        "                              true_infection=true_INF,",
        "+ ",
        "                              est_infection=est_INF,",
        "+ ",
        "                              convergence=converg,",
        "+ ",
        "                              message=converg_message)",
        "+ ",
        "    ",
        "+ ",
        "    sim.results",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  stopCluster(cl)",
        "+ ",
        "  simtime_2 <- proc.time() - ptm",
        "+ ",
        "  ",
        "+ ",
        "  # Save em_runs to .csv in OM#_runs folder",
        "+ ",
        "  write.csv(em_runs,paste0(mainpath,\"Scenario_\",scenario,\"_runs.csv\"),row.names=FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  timing <- data.frame(em_run_time_mins=simtime_2[3]/60)",
        "+ ",
        "  write.csv(timing,paste0(mainpath,\"Scenario_\",scenario,\"_time.csv\"),row.names=FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  # Time-varying background mortality:  100.6 minutes",
        "+ ",
        "  # Time-varying background mortality without estimating disease:  9.7 minutes",
        "+ ",
        "  # Time-varying disease mortality:  35.3 minutes",
        "+ ",
        "  # Age-specific mixing ignored:  15.42 minutes",
        "+ ",
        "  # Carryover infections:  174.8 minutes",
        "+ ",
        "  # Incorporating only the disease prevalence index:  8.51 minutes",
        "+ ",
        "  ",
        "+ ",
        "  return(em_runs)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "##################################",
        "> ",
        "# Run Operating Model and Store output in separate folders",
        "> ",
        "##################################",
        "> ",
        "",
        "> ",
        "library(doParallel)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(tidyr)",
        "> ",
        "library(prodlim)",
        "> ",
        "library(R2admb)",
        "> ",
        "",
        "> ",
        "# Operating model initialization (things that don't change amongst all scenarios)",
        "> ",
        "nyr=100",
        "> ",
        "nage=8",
        "> ",
        "nstage=3",
        "> ",
        "ndays=120",
        "> ",
        "avg_waa=c(70, 94, 115, 134, 150, 160, 165, 168)",
        "> ",
        "N_sims <- 500",
        "> ",
        "",
        "> ",
        "# Exponent on Carrier or Infected numbers within Force of Infection equation - sometimes set to slightly less than 1 because of instability in dynamics (which I haven't seen)",
        "> ",
        "nonlinear_exp_1 <- 1",
        "> ",
        "nonlinear_exp_2 <- 1",
        "> ",
        "",
        "> ",
        "mainpath <- here::here(\"results/simulations/\")",
        "> ",
        "",
        "> ",
        "operating_model <- paste0(mainpath,\"om_base/\")",
        "> ",
        "",
        "> ",
        "# operating_model <- paste0(mainpath,\"om1_small samp_runs/\")",
        "> ",
        "# operating_model <- paste0(mainpath,\"om1_young sus vulnerable_runs/\")",
        "> ",
        "# operating_model <- paste0(mainpath,\"time_varying_background_mortality/\")",
        "> ",
        "# operating_model <- paste0(mainpath,\"time_varying_disease_mortality/\")",
        "> ",
        "# operating_model <- paste0(mainpath,\"ignore_carryover_infections/\")",
        "> ",
        "# operating_model <- paste0(mainpath,\"all_time_varying_mortality/\")",
        "> ",
        "# operating_model <- paste0(mainpath,\"base_with_catches/\")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "##################################",
        "> ",
        "# Scenario: Base",
        "> ",
        "##################################",
        "> ",
        "rseed_global <- 91827374",
        "> ",
        "set.seed(rseed_global)",
        "> ",
        "rseeds <- sort(runif(N_sims,100,10^7))",
        "> ",
        "",
        "> ",
        "operating_model <- paste0(mainpath,\"om_base/\")",
        "> ",
        "",
        "> ",
        "# Fishing mortality rate (year^-1)",
        "> ",
        "# fishing_mort=c(rep(0,times=150),seq(0.05,0.4,length.out=20),rep(0.4,times=10),rep(0.05,times=10),rep(0.2,times=10))",
        "> ",
        "fishing_mort=rep(0,times=nyr)",
        "> ",
        "sig_nat_mor = 0",
        "> ",
        "log_sigma_R = 0.1823216",
        "> ",
        "",
        "> ",
        "vhs_trans_rate_I=0.01",
        "> ",
        "vhs_trans_rate_C=0.000001",
        "> ",
        "vhs_mort_rate=rep(11/365,times=nyr) # 11/365",
        "> ",
        "vhs_rec_rate=rep(26/365,times=nyr) # 26/365",
        "> ",
        "# vhs_mort_rate = runif(nyr,9/365,21/365)",
        "> ",
        "# vhs_rec_rate = runif(nyr,20/365,70/365) # 26/365",
        "> ",
        "dep_scaling=0 # scaling exponent for frequency (dep_scaling=0) to density dependent (dep_scaling=1) transmission",
        "> ",
        "",
        "> ",
        "ignore.carryover.inf <- TRUE # All Infected fish die between the end of this year's transmission and next year's",
        "> ",
        "inf_prev_survey <- round(runif(nyr,5,30))  # Disease prevalence sampling dates (Generate random sequential dates within the first month of transmission)",
        "> ",
        "inf_prev_survey <- cbind(inf_prev_survey,inf_prev_survey + round(runif(nyr,1,5)))",
        "> ",
        "inf_prev_survey <- cbind(inf_prev_survey,inf_prev_survey[,2] + round(runif(nyr,1,5)))",
        "> ",
        "",
        "> ",
        "survey_selA50 <- 3",
        "> ",
        "survey_selA95 <- 4",
        "> ",
        "maturity_A50 <- 3",
        "> ",
        "maturity_A95 <- 4",
        "> ",
        "disease_vulA50 <- 3",
        "> ",
        "disease_vulA95 <- 4",
        "> ",
        "dis_survey_selA50 <- 3",
        "> ",
        "dis_survey_selA95 <- 4",
        "> ",
        "selA50 = 3",
        "> ",
        "selA95 = 4",
        "> ",
        "",
        "> ",
        "# Obsevation model initialization",
        "> ",
        "sage = 0",
        "> ",
        "comp_samp_size = 200",
        "> ",
        "catch_comp_samp_size = 200",
        "> ",
        "antibody_comp_samp_size = 200",
        "> ",
        "survey_cv = 0.3",
        "> ",
        "obs_years = 51:nyr",
        "> ",
        "nyr_obs = length(obs_years)",
        "> ",
        "scenario <- \"base\"",
        "> ",
        "EM_dir <- here::here(\"results/em_v1/\")",
        "> ",
        "model_version <- \"vhs_asa_em_v1\"",
        "> ",
        "dis_mix_age_thresh <- 8",
        "> ",
        "fix_rec_rate <- 1",
        "> ",
        "fix_dis_survey_slx <- 1",
        "> ",
        "Params = list(dummy=                    0,                    #1",
        "+ ",
        "              ac_coef_rec=              0.6,                  #2",
        "+ ",
        "              natural_mortality=        0.25,                 #3",
        "+ ",
        "              log_Ninit=                4,                    #4",
        "+ ",
        "              log_rbar=                 4,                    #5",
        "+ ",
        "              log_q_survey=             -0.5,                 #6",
        "+ ",
        "              plus_group_mortality=     0.25,                 #7",
        "+ ",
        "              log_SD_survey=            -1.203973,            #8",
        "+ ",
        "              log_sigma_R=              0.3364722,            #9",
        "+ ",
        "              log_sigma_Ninit=          0.3364722,            #10",
        "+ ",
        "              selA50=                   2.5,                  #11",
        "+ ",
        "              selA95=                   3,                    #12",
        "+ ",
        "              survey_selA50=            3.5,                  #13",
        "+ ",
        "              survey_selA95=            4.5,                  #14",
        "+ ",
        "              disease_selA50=           1.5,                  #15",
        "+ ",
        "              disease_selA95=           2,                    #16",
        "+ ",
        "              dis_survey_selA50=        3.5,                  #17",
        "+ ",
        "              dis_survey_selA95=        4.5,                  #18",
        "+ ",
        "              fix_recov_par=          0,                      #19",
        "+ ",
        "              log_Ninit_devs=         rep(0.0,times=nage-1),  #20",
        "+ ",
        "              log_rbar_devs=          rep(0.0,times=nyr_obs ),#21",
        "+ ",
        "              init_immune=            rep(0,times=nage),      #22",
        "+ ",
        "              tran_infec_rate=        rep(0,times=nyr_obs),   #23",
        "+ ",
        "              beta_prev_index=        0)                      #24",
        "> ",
        "fixed_par_ls <-  c(1,2,3,6,7,8,11,12,17,18,22,24)",
        "> ",
        "",
        "> ",
        "ptm <- proc.time()",
        "> ",
        "em.results <- run_em(EM_dir,model_version,operating_model,scenario,nage,nyr_obs,fixed_par_ls,dis_mix_age_thresh,fix_rec_rate,fix_dis_survey_slx,N_sims,rseeds,Params)",
        "Note: Using Makevars in /Users/johnt23/.R/Makevars \nmake: Nothing to be done for `all'.\n",
        "\n",
        "Called from: socketSelect(socklist)\n",
        "Browse[1]> ",
        "Q",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        2
    ]
}