{
    "collab_server" : "",
    "contents" : "#  simulation_analysis.R\n#  Created by John Trochta\n#  This code runs Age-structured VHS models (OM) to generate new data and fits TMB models (EM)\n#  to these to estimate key stock assessment output and time-varying infection rates\noptions(scipen=9)\nsetwd(here::here())\n########\n# 07/09/2020\n# Run tests: Have no disease transmission and see if things work\n# - Save in truth initial immune proportions (with arctan transformation)\n\n########\n\n# Loading in the data\n# Store the file names from which data is available\nread.in.data  <- function(){\n  source(file=paste0(here::here(\"src\"),\"/data_reader.R\"))\n  dat.unnamed <- data_reader(filename=\"vhs_asa_em.dat\") # This is nyr - we want to start at nyr_tobefit\n  \n  flag = dat.unnamed[[1]]\n  dat.unnamed[[1]] = NULL\n  \n  Data <- list(nyr = dat.unnamed[[1]],\n               sage = dat.unnamed[[2]],\n               nage = dat.unnamed[[3]],\n               comp_samp_size = dat.unnamed[[4]],\n               antibody_comp_samp_size = dat.unnamed[[5]],\n               survey_obs = dat.unnamed[[6]],\n               catches = dat.unnamed[[7]],\n               catch_comps = dat.unnamed[[8]],\n               comp_obs = dat.unnamed[[9]],\n               antibody_obs = dat.unnamed[[10]],\n               avg_waa = dat.unnamed[[11]],\n               maturity_A50 = dat.unnamed[[12]],\n               maturity_A95 = dat.unnamed[[13]],\n               eps=0.01,\n               flag=flag)\n  return(Data)\n}\n\n##################################\n# Run Operating Model and Store output in separate folders\n##################################\n\nlibrary(doParallel)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(prodlim)\nlibrary(R2admb)\n\nsource(here::here(\"src/vhs_age_stage_om.R\"))\nsource(here::here(\"src/fun_obs_mod.R\"))\nsource(here::here(\"src/fun_write_dat.R\"))\nsource(here::here(\"src/fun_write_truth.R\"))\nsource(file=paste0(here::here(\"src\"),\"/data_reader.R\"))\n\n# Operating model initialization\nnyr=200\nnage=8\nnstage=3\nndays=120\navg_waa=c(70, 94, 115, 134, 150, 160, 165, 168)\n\n# vhs_trans_rate_I=0\n# vhs_trans_rate_C=0\n# vhs_mort_rate=0\n# vhs_rec_rate=0\n\nvhs_trans_rate_I=0.01\nvhs_trans_rate_C=0.000001\nvhs_mort_rate=11/365\nvhs_rec_rate=26/365\ndep_scaling=0 # scaling exponent for frequency (dep_scaling=0) to density dependent (dep_scaling=1) transmission\n\nnonlinear_exp_1 = 1\nnonlinear_exp_2 = 1\n\nvhs_rec_rate/(vhs_rec_rate+vhs_mort_rate)\n\nfishing_mort=0 # Fishing mortality rate (year^-1)\nsurvey_selA50 <- 3\nsurvey_selA95 <- 4\nmaturity_A50 <- 3\nmaturity_A95 <- 4\ndisease_vulA50 <- 3\ndisease_vulA95 <- 4\n\n\n# Obsevation model initialization\nsage = 0\ncomp_samp_size = 200\nantibody_comp_samp_size = 200\nsurvey_cv = 0.3\nobs_years = 151:nyr\nn_obs_yr = length(obs_years)\n\nN_sims <- 50\nmainpath <- here::here(\"results/simulations/\")\noperating_model <- paste0(mainpath,\"OM1_runs/\")\n\n\ndir.create(operating_model)\n\nset.seed(91827374)\n\nrseeds <- runif(N_sims,100,10^7)\n#rseeds <- 3251557\n\ncl <- makeCluster(6)\nregisterDoParallel(cl)\nptm <- proc.time()\ni=1\nom_runs <- foreach(i=1:N_sims) %dopar%{\n  # foreach(i=1){\n  rseed = round(rseeds[i])\n  # Create folder simulated data set titled \"rseed_###\"\n  modelPath <- paste0(operating_model,\"/rseed_\",rseed)\n  \n  dir.create(modelPath)\n  \n  setwd(modelPath)\n  \n  # Run OM\n  run.1 = vhs.asa(nyr,nage,nstage,ndays,avg_waa,vhs_trans_rate_I,vhs_trans_rate_C,vhs_mort_rate,vhs_rec_rate,dep_scaling,\n                  fishing_mort,survey_selA50,survey_selA95,maturity_A50,maturity_A95,disease_vulA50,disease_vulA95,\n                  nonlinear_exp_1,nonlinear_exp_2,sig_nat_mor,selA50,selA95,rseed)\n  Nya = run.1$Nya[obs_years,]\n  predicted_comps = run.1$predicted_comps[obs_years,]\n  predicted_immune_comps = run.1$predicted_immune_comps[obs_years,]\n  predicted_survey = run.1$predicted_survey[obs_years]\n  Cya = run.1$Cya[obs_years,]\n  N_catch = run.1$N_catch[obs_years]\n  catches = run.1$catches[obs_years]\n  catch_comps = run.1$catch_comps[obs_years,]\n  SSB = run.1$SSB[obs_years]\n  Sya = run.1$Sya[obs_years,]\n  Nya_new_infect = run.1$Nya_new_infect[obs_years,]\n  Nya_sus = run.1$Nya_sus[obs_years,]\n  Nya_sel_sus = run.1$Nya_sel_sus[obs_years,]\n  survey_slx = run.1$survey_slx\n  \n  # Check for negative or non-exisitent numbers\n  flag = 0\n  if(any(run.1$Nya<=0)){\n    flag = 1\n  }else if(any(is.nan(run.1$Nya))){\n    flag = 2\n  }else if(any(is.na(run.1$Nya))){\n    flag = 3\n  }\n  \n  # Run Obs mode\n  observations <- fun_obs_mod(obs_years,Nya,comp_samp_size,\n                              predicted_comps,survey_slx,\n                              predicted_immune_comps,antibody_comp_samp_size,\n                              predicted_survey,survey_cv,Cya,N_catch,\n                              rseed)\n  survey_obs = observations$survey_obs\n  comp_obs = observations$comp_obs\n  antibody_obs = observations$antibody_obs\n  fun_write_dat(obs_years,nyr,sage,nage,comp_samp_size,antibody_comp_samp_size,\n                survey_obs,catches,catch_comps,\n                comp_obs,antibody_obs,avg_waa,maturity_A50,maturity_A95,\n                rseed,flag)\n  \n  # Write truth to separate files for quantities of interest\n  fun_write_truth(SSB,Nya,Nya_new_infect,Nya_sel_sus,Sya,rseed,flag)\n}\nsimtime_1 <- proc.time() - ptm\nstopCluster(cl)\n\n\n##################################\n# Get the cpp code compiled\n##################################\n# Data Prep (this directory contains the most recently edited .DAT and .CTL files)\n# modelPath <- paste0(operating_model,\"rseed_3251557\")\nEM_dir <- here::here(\"results/em1/\")\nsetwd(EM_dir)\n\nrequire(TMB)\nlibrary(TMB)\n\n# TMB Prep - this compiles the code\nmodel_version=\"vhs_asa_em1\"\ncompile(paste0(model_version,\".cpp\")) \ndyn.load( dynlib(model_version) )\n\n\n##################################\n# Run simulation analysis by fitting EM to each OM\n##################################\n# Parameter list with names - length(Params) should =length(par_sizes)+1\nnage=8\nnyr_obs=50\n\nParams = list(dummy=                    0,            #1\n              ab_logit_midpoint=        0.5,          #2\n              ab_logit_k=               10,           #3\n              ab_logit_max=             0.3,          #4\n              ac_coef_rec=              0.6,          #5\n              natural_mortality=        0.25,         #6\n              log_Ninit=                4,            #7\n              log_rbar=                 4,            #8\n              log_q_survey=             -0.5,         #9\n              plus_group_mortality=     1.5,          #10\n              log_SD_survey=            -1.203973,    #11\n              log_sigma_R=              0.3364722,    #12\n              log_sigma_Ninit=          0.3364722,    #13\n              recov_rate=               0.5,          #14\n              selA50=                   1,            #15\n              selA95=                   2,            #16\n              survey_selA50=            3.5,            #17\n              survey_selA95=            4.5,            #18\n              disease_selA50=           3.9,            #19\n              disease_selA95=           4.9,            #20\n              #log_Ninit_devs=         c(0.458693,-0.143487,-0.477089,-1.02463,0.224749,-0.357725,0.885003,0.744641,0.238758),\n              #log_rbar_devs=          c(0.55374,-0.024794,0.578113,0.247497,0.940703,0.295339,-0.223225,-0.00762502,0.152574,0.0182584,0.111607,0.080687,0.340707,-0.684164,0.122742,-0.245559,-0.841673,0.114844,0.342979,-0.228557,0.453561,0.200792,0.662165,0.383346,0.32553,0.746135,1.57443,-0.468829,0.00383303,0.549472))\n              log_Ninit_devs=         rep(0.0,times=nage-1),\n              log_rbar_devs=          rep(0.0,times=nyr_obs ),\n              init_immune=            rep(0,times=nage),\n              tran_infec_rate=        rep(0.5,times=nyr_obs))\n#tran_infec_rate=        rep(1,times=nyr_obs))\n\ninfec_rate_bounds = c(0,1)\n#infec_rate_bounds = c(-Inf,Inf)\n\nMap_base <- Params\nLB <- c(-Inf, 0.1, 1,  0.2, 0, 0.15, 1, 1, -2, 0.25, -4, -4, -4, 0.01, 0.5, 1, 0.5, 1, 0, 0, rep(-5,nage-1), rep(-5,nyr_obs), rep(0.0,times=nage), rep(infec_rate_bounds[1],times=nyr_obs))\nUB <- c( Inf, 0.9, 20, 0.5, 1, 0.6,  8, 8, 0,  2,    0.5,  0.7,  0.7,  1.0, 5,   6, 5,   6, 6, 6, rep(5,nage-1),  rep(5,nyr_obs ), rep(1.0,times=nage), rep(infec_rate_bounds[2], times=nyr_obs))\n\nfor(i in 1:(length(Map_base))){\n  Map_base[[i]] <- factor(rep(NA,length(Map_base[[i]])))\n}\n\n#RE <- c('log_rbar_devs')\nRE <- c('log_rbar_devs','log_Ninit_devs')\n\nmap_all <- Map_base[c(1,2,3,4,5,6,9,11,15,16,23)]\n\n# For testing without disease\n#map_all <- Map_base[c(1,2,3,4,5,6,9,11,14,15,16,19,20,23,24)]\n\nbound.ind <- which(names(unlist(Params))%in%\n                     names(unlist(Params[-which(names(Params)%in%names(map_all) | names(Params)%in%RE)])))\n# names(unlist(Params))[bound.ind]\nLB_temp <- LB[bound.ind]\nUB_temp <- UB[bound.ind]\n\ni=1\n\nptm <- proc.time()\ncl <- makeCluster(6)\nregisterDoParallel(cl)\nem_runs <- foreach(i=1:N_sims,.combine=rbind) %dopar%{\n  #em_runs <- foreach(i=1:6,.combine=rbind) %dopar%{\n  require(TMB)\n  library(TMB)\n  # for(i in 1:(N_sims)){\n  # Set WD to current simulation rseed\n  rseed = round(rseeds[i])\n  modelPath <- paste0(operating_model,\"/rseed_\",rseed)\n  #modelPath <- paste0(operating_model,\"rseed_7753741/\")\n  setwd(modelPath)\n  \n  # Copy EM from directory to simulations directory\n  filestocopy <- list.files(EM_dir)\n  file.copy(from=paste0(EM_dir,filestocopy), to=modelPath, overwrite = TRUE)\n  \n  # Read in truth by which I will compare my results (FIX)\n  true_SSB <- data_reader(filename=\"truth.dat\")[[2]] # This is nyr - we want to start at nyr_tobefit\n  true_REC <- data_reader(filename=\"truth.dat\")[[3]]\n  true_INF <- data_reader(filename=\"truth.dat\")[[5]][,6]\n  \n  # Read in data\n  Data <- read.in.data()\n  flag <- Data[[15]]\n  Data[[15]] <- NULL\n  \n  if(flag==0){\n    # Fit the model\n    model_version=\"vhs_asa_em\"\n    dyn.load( dynlib(model_version) )\n    model <- MakeADFun( data=Data, parameters=Params, DLL=\"vhs_asa_em\", map=map_all, random=RE, hessian=T, silent=TRUE)\n    fit <- nlminb(model$par, model$fn, model$gr,control=list( sing.tol=1e-20,rel.tol=1e-12,eval.max=1000000,iter.max=10000),\n                  lower=LB_temp,upper=UB_temp)\n    \n    #(model$report()$infec_rate-true_INF)\n    #(model$report()$SSB-true_SSB)/true_SSB\n    #(model$report()$recruits_obs-true_REC)/true_REC\n    #model$report()$f_llk\n    #model$report()$disease_slx\n    #model$report()$survey_slx\n    #fit$par\n    \n    saveRDS(fit, file=\"parameters.RDS\")\n    saveRDS(model, file=\"model_output.RDS\")\n    \n    # Store the estimates\n    est_SSB <- model$report()$SSB\n    est_REC <- model$report()$recruits_obs\n    est_INF <- model$report()$infec_rate\n    \n    converg <- fit$convergence\n    converg_message <- fit$message\n  }else{\n    # Store the estimates\n    est_SSB <- rep(NA,length.out=length(true_SSB))\n    est_REC <- rep(NA,length.out=length(true_REC))\n    est_INF <- rep(NA,length.out=length(true_INF))\n    \n    converg <- NA\n    converg_message <- NA\n  }\n  \n  sim.results <- data.frame(seed=rseed,\n                            true_ssb=true_SSB,\n                            est_ssb=est_SSB,\n                            true_rec=true_REC,\n                            est_rec=est_REC,\n                            true_infection=true_INF,\n                            est_infection=est_INF,\n                            convergence=converg,\n                            message=converg_message)\n  \n  sim.results\n}\nstopCluster(cl)\nsimtime_2 <- proc.time() - ptm\n\n# Save em_runs to .csv in OM#_runs folder\nwrite.csv(em_runs,paste0(operating_model,\"em_runs.csv\"),row.names=FALSE)\n\n\n\n\n\n\n\n##################################\n# Plotting Relative Error of Key outputs (SSB, REC, Infection rates)\n##################################\nlibrary(reshape2)\nlibrary(ggplot2)\n\n# Calculate relative error for SSB and Recruitment\nrel.err <- em_runs %>% group_by(seed) %>% transmute('Year'=1:length(true_ssb),\n                                                    '(a) SSB'=(est_ssb - true_ssb)/true_ssb,\n                                                    '(b) Recruitment'=(est_rec - true_rec)/true_rec,\n                                                    '(c) Infection rate'=(est_infection-true_infection))\n\n# Melt the data frame\nrel.err.2 <- melt(as.data.frame(rel.err),id=1:2)\n\n# Calc 95% quantiles for each year\nrel.err.3 <- rel.err.2 %>% group_by(variable,Year) %>% summarize(Q.025=quantile(value,probs=0.025),\n                                                                 Q.25=quantile(value,probs=0.25),\n                                                                 Q.50=quantile(value,probs=0.5),\n                                                                 Q.75=quantile(value,probs=0.75),\n                                                                 Q.975=quantile(value,probs=0.975))\n# Now plot\nfont.size <- 14\n\nggplot(data=rel.err.3,aes(x=Year,y=Q.50)) + \n  geom_ribbon(aes(ymin=Q.025,ymax=Q.975),fill=\"grey70\")+\n  geom_ribbon(aes(ymin=Q.25,ymax=Q.75),fill=\"grey85\")+\n  geom_hline(yintercept=0,linetype=\"dashed\")+\n  geom_line(size=1.25)+\n  coord_cartesian(ylim=c(-1,1))+\n  facet_grid(variable~.,switch=\"y\")+\n  scale_x_discrete(limits=c(0,50),expand=c(0,0))+\n  theme_classic()+\n  theme(strip.background = element_blank(),\n        panel.border=element_rect(fill=NA),\n        plot.title = element_text(hjust = 0.5),\n        strip.text.y = element_text(size=font.size),\n        strip.placement = \"outside\",\n        axis.text.y = element_text(size=font.size-2),\n        axis.text.x = element_text(size=font.size-2),\n        axis.ticks.x= element_line(color=\"black\"),\n        # axis.title.y = element_text(size=font.size+2),\n        axis.title.y = element_blank(),\n        plot.margin = margin(0.5, 0.5, 0.5, 0.5, \"cm\"),\n        panel.spacing = unit(0.5, \"lines\"),\n        legend.position =\"none\")\n\n\n##################################\n# Load and plot key parameters, particularly regarding disease\n##################################\n# Read in parameter estimates\nest_pars <- foreach(i=1:N_sims,.combine=rbind) %do% {\n  # Set WD to current simulation rseed\n  rseed = round(rseeds[i])\n  modelPath <- paste0(operating_model,\"/rseed_\",rseed)\n  #modelPath <- paste0(operating_model,\"rseed_7753741/\")\n  setwd(modelPath)\n  \n  pars <- readRDS(\"parameters.RDS\")\n  sel_pars <- pars$par[c(\"recov_rate\",\"disease_selA50\",\"disease_selA95\",\"survey_selA50\",\"survey_selA95\",\"log_sigma_R\",\"log_rbar\")]\n  \n  results <- data.frame(seed=rseed,t(sel_pars))\n  \n  results\n}\n\n# Calculate absolute error\ntru_pars <- c(vhs_rec_rate/(vhs_rec_rate+vhs_mort_rate),3,4,3,4,0.1823216,5.2)\npar_ae <- t(apply(est_pars,1,function(x) x[-1]-tru_pars))\n\n# Melt the data frame\npar_ae <- melt(as.data.frame(par_ae),id=NULL)\n\n\nggplot(data=par_ae,aes(x=variable,y=value)) + \n  geom_boxplot()+\n  geom_hline(yintercept=0,linetype=\"dashed\")+\n  coord_cartesian(ylim=c(-1,1))+\n  theme_classic()+\n  theme(panel.border=element_rect(fill=NA),\n        plot.title = element_text(hjust = 0.5),\n        axis.text.y = element_text(size=font.size-2),\n        axis.text.x = element_text(size=font.size-2,angle=45,vjust=0.5),\n        axis.ticks.x= element_line(color=\"black\"),\n        # axis.title.y = element_text(size=font.size+2),\n        axis.title.y = element_blank(),\n        plot.margin = margin(0.5, 0.5, 0.5, 0.5, \"cm\"),\n        panel.spacing = unit(0.5, \"lines\"),\n        legend.position =\"none\")\n\nelement_tex\n\n##################################\n# Load in results for single EM run\n##################################\ni = 1\nrseed = round(rseeds[i])\nmodelPath <- paste0(operating_model,\"/rseed_\",rseed)\nsetwd(modelPath)\nouts <- readRDS(\"model_output.RDS\")\nouts$report()\n\npars <- readRDS(\"parameters.RDS\")\npars$par",
    "created" : 1632315523125.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "15|28|38|0|\n",
    "hash" : "3137427309",
    "id" : "1DADFF36",
    "lastKnownWriteTime" : 1601081160,
    "last_content_update" : 1632315538040,
    "path" : "~/IDrive-Sync/Thesis/antibody_sim/src/simulation_analysis.R",
    "project_path" : "src/simulation_analysis.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}