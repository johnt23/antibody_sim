# Compile and simulate data from ADMB model.
system('admb SS_SRR',ignore.stdout=TRUE)
system(paste0('./SS_SRR -noest -sim ',rseed[i]),ignore.stdout=TRUE)
}
Data <- read.in.data()
# Find indices of upper and lower bounds to use in the function
#for(k in 1:N_EMs){
# Load and run model
Data$EM <- om.em.index[j,1]
model = MakeADFun( data=Data, parameters=Params, DLL="SS_SRR_tmb", map=map_all, random=RE, hessian=T, silent=TRUE)
# Fit model
fit <- nlminb(model$par, model$fn, model$gr,control=list( sing.tol=1e-20,rel.tol=1e-12,eval.max=1000000,iter.max=10000),
lower=LB_temp,upper=UB_temp)
# Obtain best estimates
best <- model$env$last.par.best
# Take names from named vector and save values to these names in a list
best_2 <- lapply(split(best,names(best)),unname)
# Only replace the estimated parameters, not the fixed
Params_best <- modifyList(Params,best_2)
# Deterministic re-run
model_2 = MakeADFun( data=Data, parameters=Params_best, DLL="SS_SRR_tmb", map=map_all, random=RE, hessian=T, silent=TRUE)
# Store reported variables from cpp
Report = model_2$report()
retro.results <- c(rseed[i],om.em.index[j,2],Data$EM,0,Report$SSB)
for(t in 1:5){
Data.retro <- Data
Data.retro$nyr <- Data.retro$nyr-t
Data.retro$survey <- Data.retro$survey[1:(nyr-t)]
Data.retro$catches <- Data.retro$catches[1:(nyr-t)]
Data.retro$catch_comps <- Data.retro$catch_comps[1:(nyr-t),]
Data.retro$p_i <- Data.retro$p_i[1:(nyr-t),]
Data.retro$P_indices <- Data.retro$P_indices[1:(nyr-t),]
Params.retro <- Params
Params.retro$log_rbar_devs <- Params$log_rbar_devs[1:(nyr-t)]
# Fit model to peeled data
model = MakeADFun(data=Data.retro,parameters=Params.retro, DLL="SS_SRR_tmb", map=map_all, random=RE, hessian=T, silent=TRUE)
fit <- nlminb(model$par, model$fn, model$gr,control=list( sing.tol=1e-20,rel.tol=1e-12,eval.max=1000000,iter.max=10000),
lower=LB_temp,upper=UB_temp)
best <- model$env$last.par.best
best_2 <- lapply(split(best,names(best)),unname)
Params_best <- modifyList(Params,best_2)
# Now run model from peeled data & forecast all years ahead (NO process error)
#if(om.em.index[j,1]<5){
#  Params_best$log_rbar_devs <- c(Params_best$log_rbar_devs,rep(0,times=t))
#}else{
# For all EM, just take mean deviate of last 5 years to make recruitment recruitment forecasts
tempor <- length(Params_best$log_rbar_devs)
Params_best$log_rbar_devs <- c(Params_best$log_rbar_devs,
rep(mean(Params_best$log_rbar_devs[(tempor-4):tempor]),times=t))
rm(tempor)
#}
model_2 = MakeADFun(data=Data,parameters=Params_best,DLL="SS_SRR_tmb",map=map_all,random=RE,hessian=T,silent=TRUE)
Report = model_2$report()
retro.results <- rbind(retro.results,c(rseed[i],om.em.index[j,2],Data$EM,t,Report$SSB))
}
setwd(modelPath)
retro.results
}
}
stopCluster(cl)
simtime_2 <- proc.time() - ptm
stopCluster(cl)
om.em.index <- expand.grid(1:N_EMs,1:N_OMs)
cl <- makeCluster(3)
registerDoParallel(cl)
ptm <- proc.time()
retrospective <- foreach(i=1:N_sims, .combine=rbind) %dopar%{
#for(i in 1:(N_sims)){
require(TMB)
library(TMB)
library(dplyr)
library(tidyr)
library(prodlim)
library(R2admb)
read.in.data  <- function(){
filename <- vector(length=3)
filename[1]="SS_SRR.dat"
filename[2]="site_indices.ctl"
filename[3]="parameters.ctl"
row_lengths <- count.fields(filename[1])
max_ncols <- max(row_lengths)
# dat_file <- data_reader(filename=filename[1]) # This is nyr - we want to start at nyr_tobefit
dat_file <- read.table(filename[1], header = FALSE, col.names = paste0("V",seq_len(max_ncols)), fill = TRUE)
dat_file <- unname(dat_file)
cc_nyr = 36
nyr = unlist(dat_file[1,1:row_lengths[1]])
nage = unlist(dat_file[3,1:row_lengths[3]])
Data_1 <- list(nyr = nyr,
sage = unlist(dat_file[2,1:row_lengths[2]]),
nage = nage,
sampsize = unlist(dat_file[4,1:row_lengths[4]]),
survey = data.matrix(dat_file[5,1:row_lengths[5]])[1,],
catches = data.matrix(dat_file[6,1:row_lengths[6]])[1,],
catch_comps = data.matrix(dat_file[7:cc_nyr,1:row_lengths[cc_nyr]]),
avg_waa = data.matrix(dat_file[cc_nyr+1,1:row_lengths[cc_nyr+1]])[1,],
maturity_A50 = unlist(dat_file[cc_nyr+2,1:row_lengths[cc_nyr+2]]),
maturity_A95 = unlist(dat_file[cc_nyr+3,1:row_lengths[cc_nyr+3]]),
prop_female = unlist(dat_file[cc_nyr+6,1:row_lengths[cc_nyr+6]]))
row_lengths <- count.fields(filename[2])
max_ncols <- max(row_lengths)
site_indices <- read.table(filename[2], header = FALSE, col.names = paste0("V",seq_len(max_ncols)), fill = TRUE)
site_indices <- unname(site_indices)
Nsites <- unlist(site_indices[1,1:row_lengths[1]])
start_ind <- c(1,2,32,33)
end_ind <- c(1,31,32,62)
Data_2 <- list(Nsites = Nsites,
p_i = data.matrix(site_indices[start_ind[2]:end_ind[2],1:row_lengths[end_ind[2]]]),
N_Pindices = unlist(site_indices[start_ind[3]:end_ind[3],1:row_lengths[end_ind[3]]]),
P_indices = data.matrix(site_indices[start_ind[4]:end_ind[4],1:row_lengths[end_ind[4]]]),
P_to_use = 1,
EM=1,
eps=0.01)
Data <- c(Data_1,Data_2)
return(Data)
}
TMB_mod_dir <- ("~/PWS_herring/semispatialrecruitment/tmb_model/")
setwd(TMB_mod_dir)
Data <- read.in.data()
# Parameter list with names - length(Params) should =length(par_sizes)+1
Params = list(dummy=                  0,
log_natural_mortality=  0.3,
selA50=                 3,
selA95=                 4,
#log_R0=                 4,
log_rbar=               4,
log_sigma_R=            -1,
log_sigma_Ninit=        -1,
log_alpha=              -5,
log_beta=               -8,
log_q_survey=           -0.5,
log_SD_survey=          -1.2,
log_Ninit=              4,
survey_selA50=          4,
survey_selA95=          5,
#log_Ninit_devs=         c(0.458693,-0.143487,-0.477089,-1.02463,0.224749,-0.357725,0.885003,0.744641,0.238758),
#log_rbar_devs=          c(0.55374,-0.024794,0.578113,0.247497,0.940703,0.295339,-0.223225,-0.00762502,0.152574,0.0182584,0.111607,0.080687,0.340707,-0.684164,0.122742,-0.245559,-0.841673,0.114844,0.342979,-0.228557,0.453561,0.200792,0.662165,0.383346,0.32553,0.746135,1.57443,-0.468829,0.00383303,0.549472))
log_Ninit_devs=         rep(0.0,times=Data$nage-1),
log_rbar_devs=          rep(0.0,times=Data$nyr))
Map_base <- Params
LB <- c(-Inf,0.15,2.5,4,3,-1.6,-1.6,-6.5,-15,-4.6,-2.3,2,1,3,rep(-5,Data$nage-1),rep(-5,Data$nyr))
UB <- c(Inf,0.6,4,6,8,0.5,0.5,-2.5,-7,-0.01,-0.7,8,5,8,rep(5,Data$nage-1),rep(5,Data$nyr))
for(i in 1:(length(Map_base))){
Map_base[[i]] <- factor(rep(NA,length(Map_base[[i]])))
}
model_version="SS_SRR_tmb"
# model_version="simple"
#compile(paste0(model_version,".cpp"))
# Compile
dyn.load( dynlib(model_version) )
# Specify random effects and fix parameters
RE <- c('log_rbar_devs','log_Ninit_devs')
nyr <- Data$nyr
nage <- Data$nage
npars <- 11 # Number of parameters we are looking at
ln.transform <- c(0,0,1,1,1,1,1,1,1,0,0)
# RE <- NULL
map_all <- Map_base[c(1,2,11)]
bound.ind <- which(names(unlist(Params))%in%
names(unlist(Params[-which(names(Params)%in%names(map_all))])))
LB_temp <- LB[bound.ind]
UB_temp <- UB[bound.ind]
# Create folder simulated data set titled "rseed_###"
modelPath <- paste0(mainpath,simfolder,"/rseed_",rseed[i])
for(j in 1:N_models){
simulated_om <-  paste0(modelPath,"/OM_",om.em.index[j,2])
setwd(simulated_om)
if(length(list.files(simulated_om))==0){
# Copy the files that will remain unchanged to this new directory
filestocopy <- list.files(operating_model[om.em.index[j,2]])
file.copy(from=paste0(operating_model[om.em.index[j,2]],filestocopy), to=simulated_om, overwrite = TRUE)
setwd(simulated_om)
# Compile and simulate data from ADMB model.
system('admb SS_SRR',ignore.stdout=TRUE)
system(paste0('./SS_SRR -noest -sim ',rseed[i]),ignore.stdout=TRUE)
}
Data <- read.in.data()
# Find indices of upper and lower bounds to use in the function
#for(k in 1:N_EMs){
# Load and run model
Data$EM <- om.em.index[j,1]
model = MakeADFun( data=Data, parameters=Params, DLL="SS_SRR_tmb", map=map_all, random=RE, hessian=T, silent=TRUE)
# Fit model
fit <- nlminb(model$par, model$fn, model$gr,control=list( sing.tol=1e-20,rel.tol=1e-12,eval.max=1000000,iter.max=10000),
lower=LB_temp,upper=UB_temp)
# Obtain best estimates
best <- model$env$last.par.best
# Take names from named vector and save values to these names in a list
best_2 <- lapply(split(best,names(best)),unname)
# Only replace the estimated parameters, not the fixed
Params_best <- modifyList(Params,best_2)
# Deterministic re-run
model_2 = MakeADFun( data=Data, parameters=Params_best, DLL="SS_SRR_tmb", map=map_all, random=RE, hessian=T, silent=TRUE)
# Store reported variables from cpp
Report = model_2$report()
retro.results <- c(rseed[i],om.em.index[j,2],Data$EM,0,Report$SSB)
for(t in 1:5){
Data.retro <- Data
Data.retro$nyr <- Data.retro$nyr-t
Data.retro$survey <- Data.retro$survey[1:(nyr-t)]
Data.retro$catches <- Data.retro$catches[1:(nyr-t)]
Data.retro$catch_comps <- Data.retro$catch_comps[1:(nyr-t),]
Data.retro$p_i <- Data.retro$p_i[1:(nyr-t),]
Data.retro$P_indices <- Data.retro$P_indices[1:(nyr-t),]
Params.retro <- Params
Params.retro$log_rbar_devs <- Params$log_rbar_devs[1:(nyr-t)]
# Fit model to peeled data
model = MakeADFun(data=Data.retro,parameters=Params.retro, DLL="SS_SRR_tmb", map=map_all, random=RE, hessian=T, silent=TRUE)
fit <- nlminb(model$par, model$fn, model$gr,control=list( sing.tol=1e-20,rel.tol=1e-12,eval.max=1000000,iter.max=10000),
lower=LB_temp,upper=UB_temp)
best <- model$env$last.par.best
best_2 <- lapply(split(best,names(best)),unname)
Params_best <- modifyList(Params,best_2)
# Now run model from peeled data & forecast all years ahead (NO process error)
#if(om.em.index[j,1]<5){
#  Params_best$log_rbar_devs <- c(Params_best$log_rbar_devs,rep(0,times=t))
#}else{
# For all EM, just take mean deviate of last 5 years to make recruitment recruitment forecasts
tempor <- length(Params_best$log_rbar_devs)
Params_best$log_rbar_devs <- c(Params_best$log_rbar_devs,
rep(mean(Params_best$log_rbar_devs[(tempor-4):tempor]),times=t))
rm(tempor)
#}
model_2 = MakeADFun(data=Data,parameters=Params_best,DLL="SS_SRR_tmb",map=map_all,random=RE,hessian=T,silent=TRUE)
Report = model_2$report()
retro.results <- rbind(retro.results,c(rseed[i],om.em.index[j,2],Data$EM,t,Report$SSB))
}
setwd(modelPath)
retro.results
}
}
vector(10)
nyr <- 40
nage <- 10
matrix(NA,nyr,nage)
4.99/22
2.99/16
4.49/16
3.49/12
4.99/16
hist(faithful$eruptions)
hist(faithful$eruptions, breaks=25, col="orchid")
boxplot(faithful$eruptions)
boxplot(faithful$eruptions, col="skyblue")
plot(faithful)
plot(faithful, pch=16, col="limegreen", main="Scatter plot!", xlab="XXX",
cex.axis=1.5, cex.lab=1.5, cex.main=2, cex=0.5)
plot(faithful, pch=16, col="limegreen", cex.axis=1.5, cex.lab=1.2,
main="Scatter plot!", cex.main=2)
x_base = seq(from=-5, to=5, by=0.01)
plot(x=x_base, y=punif(x_base, min=-4, max=4), type="l",
lwd=3, col="orchid")
lines(x=x_base, y=pexp(x_base, rate=2), lwd=3, col="limegreen")
lines(x=x_base, y=pnorm(x_base), lwd=3, col="dodgerblue")
abline(h=0)
help(pt)
x_base = seq(from=-4, to=4, by=0.01)
x_base = seq(from=-4, to=4, by=0.01)
plot(x=x_base, y=pt(x_base, df=10), type="l", ylim=c(0,1))
abline(h=0, col="gray")
abline(h=1, col="gray")
x_base = seq(from=-4, to=4, by=0.01)
plot(x_base, pnorm(x_base), type="l", lwd=3, col="blue")
lines(x_base, pt(x_base, df=10), lwd=3, col="red")
abline(h=0)
legend("bottomright", c("Normal","T (df=10)"),
lwd=3, col=c("blue","red"), cex=0.7)
plot(x=x_base, y=pnorm(x_base), type="l", lwd=3,
col="blue")
lines(x=x_base, y=pt(x_base, df=1), lwd=3,
col="red")
lines(x=x_base, y=pt(x_base, df=2), lwd=3,
col="orchid")
lines(x=x_base, y=pt(x_base, df=5), lwd=3,
col="purple")
abline(h=0)
legend("topleft", cex=0.7,
c("Normal","T (df=1)","T (df=2)", "T (df=5)"),
lwd=3, col=c("blue","red","orchid","purple"))
library("tinytex", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
dbinom(0:10,size=20,prob=0.3)
plot(dbinom(0:10,size=20,prob=0.3))
plot(c(0:12), dbinom(0:10,size=20,prob=0.3), type="h", main="Binomial Probability Mass Function",
axes=FALSE, xlab="B", ylab="Probability", ylim=c(0,1),lwd=2)
plot(c(0:12), dbinom(0:12,size=20,prob=0.3), type="h", main="Binomial Probability Mass Function",
axes=FALSE, xlab="B", ylab="Probability", ylim=c(0,1),lwd=2)
axis(1, at = c(0:12))
axis(2)
box()
pbinom(0:12,size=20,prob=0.3)
leftPointX = c(-1.5,1:12)
leftPointY = pbinom(0:12,size=20,prob=0.3)
rightPointX = c(1:12,13.5)
rightPointY = pbinom(0:12,size=20,prob=0.3)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF") axis(1, at=c(0:12))
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
axis(2)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
box()
dbinom(0:12,size=20,prob=0.3)
c(-1.5,1:12)
leftPointX = c(-0.5,1:12)
leftPointY = pbinom(1:12,size=20,prob=0.3)
rightPointX = c(1:12,13.5)
rightPointY = pbinom(1:12,size=20,prob=0.3)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
axis(2)
box()
segments(leftPointX, leftPointY, rightPointX, rightPointY,lwd=2) points(c(1:12),c(1:12)/10, pch=19)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
axis(2)
box()
segments(leftPointX, leftPointY, rightPointX, rightPointY,lwd=2)
points(c(1:12),pbinom(1:12,size=20,prob=0.3), pch=19)
pbinom(1:12,size=20,prob=0.3)
pbinom(1:12,size=20,prob=0.3)
c(0,1:12)
leftPointX = c(0,1:12)
leftPointY = pbinom(1:12,size=20,prob=0.3)
rightPointX = c(1:12,13)
rightPointY = pbinom(1:12,size=20,prob=0.3)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
axis(2)
box()
segments(leftPointX, leftPointY, rightPointX, rightPointY,lwd=2)
points(c(1:12),pbinom(1:12,size=20,prob=0.3), pch=19)
c(0,1:12)
leftPointX = c(1:12)
leftPointY = pbinom(1:12,size=20,prob=0.3)
rightPointX = c(1:12)
rightPointY = pbinom(1:12,size=20,prob=0.3)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
axis(2)
box()
segments(leftPointX, leftPointY, rightPointX, rightPointY,lwd=2)
points(c(1:12),pbinom(1:12,size=20,prob=0.3), pch=19)
leftPointX = c(0,1:12)
leftPointY = pbinom(1:12,size=20,prob=0.3)
rightPointX = c(1:12)
rightPointY = pbinom(1:12,size=20,prob=0.3)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
axis(2)
box()
segments(leftPointX, leftPointY, rightPointX, rightPointY,lwd=2)
points(c(1:12),pbinom(1:12,size=20,prob=0.3), pch=19)
leftPointX = c(0,1:12)
leftPointY = pbinom(1:12,size=20,prob=0.3)
rightPointX = c(1:12,12)
rightPointY = pbinom(1:12,size=20,prob=0.3)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
axis(2)
box()
segments(leftPointX, leftPointY, rightPointX, rightPointY,lwd=2)
points(c(1:12),pbinom(1:12,size=20,prob=0.3), pch=19)
par(mfrow=c(1,2))
plot(c(0:12), dbinom(0:12,size=20,prob=0.3), type="h", main="Binomial PMF",
axes=FALSE, xlab="B", ylab="Probability", ylim=c(0,1),lwd=2)
axis(1, at = c(0:12))
axis(2)
box()
leftPointX = c(0,1:12)
leftPointY = pbinom(1:12,size=20,prob=0.3)
rightPointX = c(1:12,12)
rightPointY = pbinom(1:12,size=20,prob=0.3)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
axis(2)
box()
segments(leftPointX, leftPointY, rightPointX, rightPointY,lwd=2)
points(c(1:12),pbinom(1:12,size=20,prob=0.3), pch=19)
20*0.2
20*0.3
20*0.3*(1-0.3)
0.3*(1-0.3)
par(mfrow=c(1,2))
plot(c(0:12), dbinom(0:12,size=20,prob=0.3), type="h", main="Binomial PMF",
axes=FALSE, xlab="B", ylab="Probability", ylim=c(0,1),lwd=2)
lines(x=0:12, y=pnorm(0:12,mean=6,sd=sqrt(0.2)), lwd=3, col="dodgerblue")
axis(1, at = c(0:12))
axis(2)
box()
par(mfrow=c(1,2))
plot(c(0:12), dbinom(0:12,size=20,prob=0.3), type="h", main="Binomial PMF",
axes=FALSE, xlab="B", ylab="Probability", ylim=c(0,1),lwd=2)
lines(x=0:12, y=dnorm(0:12,mean=6,sd=sqrt(0.2)), lwd=3, col="dodgerblue")
axis(1, at = c(0:12))
axis(2)
box()
par(mfrow=c(1,2))
plot(c(0:12), dbinom(0:12,size=20,prob=0.3), type="h", main="Binomial PMF",
axes=FALSE, xlab="B", ylab="Probability", ylim=c(0,1),lwd=2,col="red")
lines(x=0:12, y=dnorm(0:12,mean=6,sd=sqrt(4.6)), lwd=3, col="dodgerblue")
axis(1, at = c(0:12))
axis(2)
box()
20*0.3*(1-0.3)
par(mfrow=c(1,2))
plot(c(0:12), dbinom(0:12,size=20,prob=0.3), type="h", main="Binomial PMF",
axes=FALSE, xlab="B", ylab="Probability", ylim=c(0,1),lwd=2,col="red")
lines(x=0:12, y=dnorm(0:12,mean=6,sd=sqrt(4.2)), lwd=3, col="dodgerblue")
axis(1, at = c(0:12))
axis(2)
box()
20*0.3
par(mfrow=c(1,2))
plot(c(0:12), dbinom(0:12,size=20,prob=0.3), type="h", main="Binomial PMF",
axes=FALSE, xlab="B", ylab="Probability", ylim=c(0,1),lwd=2,col="red")
lines(x=0:12, y=dnorm(0:12,mean=6,sd=sqrt(4.2)), lwd=3, col="dodgerblue")
axis(1, at = c(0:12))
axis(2)
box()
leftPointX = c(0,1:12)
leftPointY = pbinom(1:12,size=20,prob=0.3)
rightPointX = c(1:12,12)
rightPointY = pbinom(1:12,size=20,prob=0.3)
plot(1,1,type="n", xlim=c(-0.5,12.5), ylim = c(0,1),xlab="B", ylab="CDF", main="Binomial CDF")
axis(1, at=c(0:12))
axis(2)
box()
lines(x=0:12, y=pnorm(0:12,mean=6,sd=sqrt(4.2)), lwd=3, col="dodgerblue")
segments(leftPointX, leftPointY, rightPointX, rightPointY,lwd=2)
points(c(1:12),pbinom(1:12,size=20,prob=0.3), pch=19)
X1 = runif(10000,2,4)
X2 = runif(10000,2,4)
Y = (X1+X2)/2
hist(Y, probability = T, col="rosybrown", breaks=30)
X1 = runif(10000,2,4)
X2 = runif(10000,2,4)
Y = (X1+X2)/2
hist(Y, probability = T, col="rosybrown", breaks=30)
hist(Y, probability = T, col="rosybrown", breaks=20)
hist(Y, probability = T, col="forestgreen", breaks=20)
hist(Y, probability = T, col="steelblue", breaks=20)
x_base = seq(from=2, to=4, by=0.001)
fY_x <- function(x){
density = ifelse(x>=2 & x<=3,x-2,
ifelse(x>3 & x<=4,4-x,0))
return(density)
}
fY_x(x_base)
x_base = seq(from=2, to=4, by=0.001)
fY_x <- function(x){
density = ifelse(x>=2 & x<=3,x-2,
ifelse(x>3 & x<=4,4-x,0))
return(density)
}
lines(x=x_base, y=fY_x(x_base),
lwd=3, col="burntorange")
X1 = runif(10000,2,4)
X2 = runif(10000,2,4)
Y = (X1+X2)/2
hist(Y, probability = T, col="steelblue", breaks=20)
x_base = seq(from=2, to=4, by=0.001)
fY_x <- function(x){
density = ifelse(x>=2 & x<=3,x-2,
ifelse(x>3 & x<=4,4-x,0))
return(density)
}
lines(x=x_base, y=fY_x(x_base),
lwd=3, col="burntorange")
X1 = runif(10000,2,4)
X2 = runif(10000,2,4)
Y = (X1+X2)/2
hist(Y, probability = T, col="steelblue", breaks=20)
x_base = seq(from=2, to=4, by=0.001)
fY_x <- function(x){
density = ifelse(x>=2 & x<=3,x-2,
ifelse(x>3 & x<=4,4-x,0))
return(density)
}
lines(x=x_base, y=fY_x(x_base),lwd=3, col="orange")
X1 = runif(10000,2,4)
X2 = runif(10000,2,4)
Y = (X1+X2)/2
hist(Y, probability = T, col="steelblue", breaks=20)
x_base = seq(from=2, to=4, by=0.001)
fY_x <- function(x){
density = ifelse(x>=2 & x<=3,x-2,
ifelse(x>3 & x<=4,4-x,0))
return(density)
}
lines(x=x_base, y=fY_x(x_base),lwd=5, col="redorange")
X1 = runif(10000,2,4)
X2 = runif(10000,2,4)
Y = (X1+X2)/2
hist(Y, probability = T, col="steelblue", breaks=20)
x_base = seq(from=2, to=4, by=0.001)
fY_x <- function(x){
density = ifelse(x>=2 & x<=3,x-2,
ifelse(x>3 & x<=4,4-x,0))
return(density)
}
lines(x=x_base, y=fY_x(x_base),lwd=5, col="darkorange")
X1 = runif(10000,2,4)
X2 = runif(10000,2,4)
Y = (X1+X2)/2
hist(Y, probability = T, col="steelblue", breaks=20,ylim=c(0,1))
x_base = seq(from=2, to=4, by=0.001)
fY_x <- function(x){
density = ifelse(x>=2 & x<=3,x-2,
ifelse(x>3 & x<=4,4-x,0))
return(density)
}
lines(x=x_base, y=fY_x(x_base),lwd=5, col="darkorange")
